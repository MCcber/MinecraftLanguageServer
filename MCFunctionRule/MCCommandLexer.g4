lexer grammar MCCommandLexer;
options {
    language = CSharp;
}

@lexer::members {
    public bool InSNbtContext { get; set; } = false;
    public bool InSelectorParameter { get; set; } = false;
}

WS : [ \t\r\n\u000C\u00A0\p{Mn}\p{Mc}\p{Zs}] -> skip;
Sharp:'#';
Slash:'/';
AtChar:'@';
AtLetter:'at';
ExclamationMark:'!';
Comma:',';
Dot:'.';
Colon:':';
DoubleDot:'..';
SquareBrackets:'[]';
LeftSquareBracket:'[';
RightSquareBracket:']';

RoundBrackets:'()';
LeftRoundBracket:'(';
RightRoundBracket:')';

CurlyBrackets:'{}';
LeftCurlyBracket:'{';
RightCurlyBracket:'}';

AngleBrackets:'<>';
LeftAngleBracket:'<';
RightAngleBracket:'>';

DoubleQuotes:'"';
Quote:'\'';

ByteKey:'byte';
IntKey:'int';
LongKey:'long';
StringKey:'string';
BooleanKey:'boolean';
ShortKey:'short';
FloatKey:'float';
DoubleKey:'double';
BooleanValue:'true'|'false'|'1b'|'0b';
SelectorName: [paresn];
AxeKey: 'x'|'y'|'z';
AxeLengthKey:'dx'|'dy'|'dz';
Axes:[xyz][xyz]?[xyz]?;
ViewRotationKey:  ('x_rotation'|'y_rotation') ;
Level: 'level';
LimitKey: 'limit';
NBT: 'nbt';
ScoreKey:'scores';
TypeKey: {InSelectorParameter}? 'type';
SortKey:'sort';

AdvancementKey:'advancements';
AttributeKey:'attribute';
BossbarKey: {!InSNbtContext}? 'bossbar';
ClearKey: {!InSNbtContext}? 'clear';
CloneKey: {!InSNbtContext}? 'clone';
DamageKey: {!InSNbtContext}? 'damage';
DataKey: {!InSNbtContext}? 'data';
DatapackKey:'datapack';
DebugKey:'debug';
DefaultgamemodeKey:'defaultgamemode';
DifficultyKey:'difficulty';
EffectKey:'effect';
EnchantKey:'enchant';
ExecuteKey:'execute';
ExperienceKey:'experience';
FillKey:'fill';
FillbiomeKey:'fillbiome';
ForceloadKey:'forceload';
FunctionKey:'function';
GamemodeKey:'gamemode';
GameruleKey:'gamerule';
GiveKey:'give';
HelpKey:'help';
ItemKey: {!InSNbtContext && !InSelectorParameter}? 'item';
JfrKey:'jfr';
KickKey:'kick';
KillKey:'kill';
ListKey:'list';
LocateKey:'locate';
LootKey:'loot';
MeKey:'me';
MsgKey:'msg';
ParticleKey:'particle';
PlaceKey:'place';
PlaysoundKey:'playsound';
PublishKey:'publish';
RecipeKey:'recipe';
ReloadKey:'reload';
ReturnKey:'return';
RideKey:'ride';
SayKey:'say';
ScheduleKey:'schedule';
ScoreboardKey:'scoreboard';
SeedKey:'seed';
SetblockKey:'setblock';
SetworldspawnKey:'setworldspawn';
SpawnpointKey:'spawnpoint';
SpectateKey:'spectate';
SpreadplayersKey:'spreadplayers';
StopsoundKey:'stopsound';
SummonKey:'summon';
TagKey:'tag';
TeamKey:'team';
TeammsgKey:'teammsg';
TeleportKey:'teleport';
TellKey:'tell';
TellrawKey:'tellraw';
TimeKey:'time';
TitleKey:'title';
TmKey:'tm';
TpKey:'tp';
TriggerKey:'trigger';
WeatherKey:'weather';
WorldborderKey:'worldborder';
XpKey:'xp';

Star:'*';
Add: {!InSNbtContext}? 'add';
Remove: {!InSNbtContext}? 'remove';
Value: {!InSNbtContext}? 'value';
Set: {!InSNbtContext}? 'set';
Multiply: {!InSNbtContext}? 'multiply';
Multiply_Base: {!InSNbtContext}? 'multiply_base';
Max: {!InSNbtContext}? 'max';
Players: {!InSNbtContext}? 'players';
Visible: {!InSNbtContext}? 'visible';
Color: {!InSNbtContext}? 'color';
Name: {!InSNbtContext}? 'name';
Style: {!InSNbtContext}? 'style';
Filtered: {!InSNbtContext}? 'filtered';
Masked: {!InSNbtContext}? 'masked';
Replace: {!InSNbtContext}? 'replace';
Force: {!InSNbtContext}? 'force';
Move: {!InSNbtContext}? 'move';
Normal: {!InSNbtContext}? 'normal';
To: {!InSNbtContext}? 'to';
By: {!InSNbtContext}? 'by';
Merge: {!InSNbtContext}? 'merge';
Modify: {!InSNbtContext}? 'modify';
Block: {!InSNbtContext}? 'block';
Entity: {!InSNbtContext}? 'entity';
Storage: {!InSNbtContext}? 'storage';
As: {!InSNbtContext}? 'as';
Grant: {!InSNbtContext}? 'grant';
Revoke: {!InSNbtContext}? 'revoke';
Everything: {!InSNbtContext}? 'everything';
Only: {!InSNbtContext}? 'only';
From: {!InSNbtContext}? 'from';
Through: {!InSNbtContext}? 'through';
Until: {!InSNbtContext}? 'until';
Base: {!InSNbtContext}? 'base';
Get: {!InSNbtContext}? 'get';
Modifier: {!InSNbtContext}? 'modifier';
Available: {!InSNbtContext}? 'available';
Enable: {!InSNbtContext}? 'enable';
After: {!InSNbtContext}? 'after';
Before: {!InSNbtContext}? 'before';
First: {!InSNbtContext}? 'first';
Last: {!InSNbtContext}? 'last';
Disable: {!InSNbtContext}? 'disable';
Start: {!InSNbtContext}? 'start';
Stop: {!InSNbtContext}? 'stop';
Infinite: {!InSNbtContext}? 'infinite';
Easy: {!InSNbtContext}? 'easy';
Hard: {!InSNbtContext}? 'hard';
Peaceful: {!InSNbtContext}? 'peaceful';
Eyes: {!InSNbtContext}? 'eyes';
Feet: {!InSNbtContext}? 'feet';
All: {!InSNbtContext}? 'all';
Biome: {!InSNbtContext}? 'biome';
Blocks: {!InSNbtContext}? 'blocks';
Dimension: {!InSNbtContext}? 'dimension';
Loaded: {!InSNbtContext}? 'loaded';
Predicate: {!InSNbtContext}? 'predicate';
Score: {!InSNbtContext}? 'score';
Matches: {!InSNbtContext}? 'matches';
Attacker: {!InSNbtContext}? 'attacker';
Controller: {!InSNbtContext}? 'controller';
Leasher: {!InSNbtContext}? 'leasher';
Origin: {!InSNbtContext}? 'origin';
Owner: {!InSNbtContext}? 'owner';
Passengers: {!InSNbtContext}? 'passengers';
Target: {!InSNbtContext}? 'target';
Vehicle: {!InSNbtContext}? 'vehicle';
Motion_blocking: {!InSNbtContext}? 'motion_blocking';
Motion_blocking_no_leaves: {!InSNbtContext}? 'motion_blocking_no_leaves';
Ocean_floor: {!InSNbtContext}? 'ocean_floor';
World_surface: {!InSNbtContext}? 'world_surface';
Over: {!InSNbtContext}? 'over';
Result: {!InSNbtContext}? 'result';
Success: {!InSNbtContext}? 'success';
Align: {!InSNbtContext}? 'align';
Anchored: {!InSNbtContext}? 'anchored';
If: {!InSNbtContext}? 'if';
Unless: {!InSNbtContext}? 'unless';
In: {!InSNbtContext}? 'in';
On: {!InSNbtContext}? 'on';
Positioned: {!InSNbtContext}? 'positioned';
Rotated: {!InSNbtContext}? 'rotated';
Run: {!InSNbtContext}? 'run';
Store: {!InSNbtContext}? 'store';
Query: {!InSNbtContext}? 'query';
Levels: {!InSNbtContext}? 'levels';
Points: {!InSNbtContext}? 'points';
Destroy: {!InSNbtContext}? 'destroy';
Hollow: {!InSNbtContext}? 'hollow';
Keep: {!InSNbtContext}? 'keep';
Outline: {!InSNbtContext}? 'outline';
Uuids: {!InSNbtContext}? 'uuids';
Poi: {!InSNbtContext}? 'poi';
Structure: {!InSNbtContext}? 'structure';
Insert: {!InSNbtContext}? 'insert';
Spawn: {!InSNbtContext}? 'spawn';
Fish: {!InSNbtContext}? 'fish';
Mine: {!InSNbtContext}? 'mine';
Feature: {!InSNbtContext}? 'feature';
Jigsaw: {!InSNbtContext}? 'jigsaw';
Template: {!InSNbtContext}? 'template';
Front_back: {!InSNbtContext}? 'front_back';
Left_right: {!InSNbtContext}? 'left_right';
None: {!InSNbtContext}? 'none';
Clockwise_90: {!InSNbtContext}? 'clockwise_90';
Counterclockwise_90: {!InSNbtContext}? 'counterclockwise_90';
Ambient: {!InSNbtContext}? 'ambient';
Hostile: {!InSNbtContext}? 'hostile';
Master: {!InSNbtContext}? 'master';
Music: {!InSNbtContext}? 'music';
Neutral: {!InSNbtContext}? 'neutral';
Player: {!InSNbtContext}? 'player';
Record: {!InSNbtContext}? 'record';
Voice: {!InSNbtContext}? 'voice';
Append: {!InSNbtContext}? 'append';
Dismount: {!InSNbtContext}? 'dismount';
Mount: {!InSNbtContext}? 'mount';
Objectives: {!InSNbtContext}? 'objectives';
Hearts: {!InSNbtContext}? 'hearts';
DisplayName: {!InSNbtContext}? 'displayname';
Rendertype: {!InSNbtContext}? 'rendertype';
Setdisplay: {!InSNbtContext}? 'setdisplay';
Operation: {!InSNbtContext}? 'operation';
Reset: {!InSNbtContext}? 'reset';
Under: {!InSNbtContext}? 'under';
Actionbar: {!InSNbtContext}? 'actionbar';
Subtitle: {!InSNbtContext}? 'subtitle';
Times: {!InSNbtContext}? 'times';
FadeIn: {!InSNbtContext}? 'fadeIn';
Stay: {!InSNbtContext}? 'stay';
FadeOut: {!InSNbtContext}? 'fadeOut';
Center: {!InSNbtContext}? 'center';
Warning: {!InSNbtContext}? 'warning';
Amount: {!InSNbtContext}? 'amount';
Buffer: {!InSNbtContext}? 'buffer';
Facing: {!InSNbtContext}? 'facing';
Prepend: {!InSNbtContext}? 'prepend';
Bossbar: {!InSNbtContext}? 'bossBar';
With: {!InSNbtContext}? 'with';
Mainhand: {!InSNbtContext}? 'mainhand';
Offhand: {!InSNbtContext}? 'offhand';
Take: {!InSNbtContext}? 'take';
Always: {!InSNbtContext}? 'always';
Never: {!InSNbtContext}? 'never';
PushOtherTeams: {!InSNbtContext}? 'pushOtherTeams';
PushOwnTeam: {!InSNbtContext}? 'pushOwnTeam';
HideForOtherTeams: {!InSNbtContext}? 'hideForOtherTeams';
HideForOwnTeam: {!InSNbtContext}? 'hideForOwnTeam';
FriendlyFire: {!InSNbtContext}? 'friendlyFire';
NametagVisibility: {!InSNbtContext}? 'nametagVisibility';
SeeFriendlyInvisibles: {!InSNbtContext}? 'seeFriendlyInvisibles';
Rain: {!InSNbtContext}? 'rain';
Thunder: {!InSNbtContext}? 'thunder';
Day: {!InSNbtContext}? 'day';
Midnight: {!InSNbtContext}? 'midnight';
Night: {!InSNbtContext}? 'night';
Daytime: {!InSNbtContext}? 'daytime';
Noon: {!InSNbtContext}? 'noon';
Gametime: {!InSNbtContext}? 'gametime';
Distance: {!InSNbtContext}? 'distance';
Empty: {!InSNbtContext}? 'empty';
Join: {!InSNbtContext}? 'join';
Leave: {!InSNbtContext}? 'leave';
CollisionRule: {!InSNbtContext}? 'collisionRule';
DeathMessageVisibility: {!InSNbtContext}? 'deathMessageVisibility';
Prefix: {!InSNbtContext}? 'prefix';
Suffix: {!InSNbtContext}? 'suffix';
LessThanOrEqualTo:'<=';
Equal:'=';
GreaterThanOrEqualTo:'>=';
OneHundredAndEighty:'180';
GreaterThanLessThan:'><';
DivisionEqual:'/=';
MultiplicationEqual:'*=';
AdditionEqual:'+=';
SubtractionEqual:'-=';
RemainderEqual:'%=';

fragment HexDigit: [0-9a-fA-F];

fragment UnicodeEscape: 'u' HexDigit HexDigit HexDigit HexDigit;

fragment EscapeChar: '\\' (["\\bfnrt] | UnicodeEscape);

UUID:[0-9]+'-'[0-9]+'-'[0-9]+'-'[0-9]+'-'[0-9]+;
fragment FloatExponent:[eE]([-+])?[0-9]+;
Integer:([-+])?[0-9]+;
IntInterval:(Integer DoubleDot)|(DoubleDot Integer)|(Integer DoubleDot Integer);
PositiveDouble:([0-9]+('.'[0-9]+)?)|([0-9]+?('.'[0-9]+));
PositiveDoubleInterval:(PositiveDouble DoubleDot)|(DoubleDot PositiveDouble)|(PositiveDouble DoubleDot PositiveDouble);
Float:(([-+])?[0-9]+(FloatExponent|FloatTypedUnit)?)|(([-+])?[0-9]*Dot[0-9]+(FloatExponent|FloatTypedUnit)?);
Double:(([-+])?[0-9]+)|(([-+])?[0-9]*Dot[0-9]+);
DoubleInterval:(Double DoubleDot)|( DoubleDot Double)|(Double DoubleDot Double);
GameTimeValue:([0-9]+('.'[0-9]+)?)[dst]?;
IntTypedUnit:[bBsSlL];
FloatTypedUnit:[dDfF];

Position: ((('~'|'^') (Double|Integer)?) | (Double|Integer)) -> pushMode(Coordinate_Mode),type(Coordinate);

fragment IdentStart:[\p{L}\p{Nl}_%$];
fragment IdentContinue:IdentStart|[\u200C\u200D]|[\p{Mn}\p{Mc}\p{Nd}\p{Pc}\p{Pd}];
Identifier:IdentStart IdentContinue*;

fragment OriginResource:Sharp? (Identifier Colon)? Identifier;

FileReference:[a-z-_]+(Slash([a-z0-9\-_]+))*;

fragment SingleStringValue:~["\p{Cc}]|EscapeChar;
fragment StringValue:[_a-zA-Z0-9-+.]|EscapeChar;
String: '"' SingleStringValue* '"';
// UnquotedKey: StringValue(StringValue)*;

ResourceLocation:OriginResource;

BlockStateKey:Identifier;
BlockStateValue:([a-z0-9_])+|BooleanValue;

MessageContent:[ ] -> pushMode(Message_Mode);

mode Message_Mode;
Message:~[\r\n]+;
MESSAGE_END: EOF -> popMode;

mode Coordinate_Mode;
Coordinate:((('~'|'^') (Double|Integer)?) | (Double|Integer));
COORDINATE_END: [ ] -> skip,popMode;
