//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/C#Project/MinecraftLanguageServer/MCFunctionRule/selector.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class selectorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, Misc=22, Integer=23, IntInterval=24, 
		Number=25, Double=26, PositiveDouble=27, TypeValue=28, Path=29, EntityId=30, 
		Bool=31, StringValue=32, MarkValue=33, FileReferrerValue=34, OpenSquareBrackets=35, 
		CloseSquareBrackets=36, OpenCurlyBrace=37, CloseCurlyBrace=38, Comma=39, 
		Equal=40, NumberKey=41, PositiveNumberKey=42, PositiveDoubleIntervalKey=43, 
		DoubleIntervalKey=44, IntIntervalKey=45, IntKey=46, JsonKey=47, TagKey=48, 
		TeamKey=49, AdvancementPath=50, NameSpace=51, TargetObjective=52, Jkey=53, 
		Jobject=54, Jpair=55, Jarray=56, Jvalue=57, AdvancementParameter=58;
	public const int
		RULE_int = 0, RULE_intInterval = 1, RULE_number = 2, RULE_positiveNumber = 3, 
		RULE_double = 4, RULE_positiveDouble = 5, RULE_doubleInterval = 6, RULE_positiveDoubleInterval = 7, 
		RULE_gamemodeValues = 8, RULE_entityId = 9, RULE_bool = 10, RULE_selectorTagValue = 11, 
		RULE_selectorTeamValue = 12, RULE_nameValue = 13, RULE_predicateValue = 14, 
		RULE_nameSpace = 15, RULE_targetObjective = 16, RULE_sortValues = 17, 
		RULE_jsonValue = 18, RULE_advancementValue = 19, RULE_scoreParameter = 20, 
		RULE_scoresValue = 21, RULE_selectorParameters = 22, RULE_parameter = 23;
	public static readonly string[] ruleNames = {
		"int", "intInterval", "number", "positiveNumber", "double", "positiveDouble", 
		"doubleInterval", "positiveDoubleInterval", "gamemodeValues", "entityId", 
		"bool", "selectorTagValue", "selectorTeamValue", "nameValue", "predicateValue", 
		"nameSpace", "targetObjective", "sortValues", "jsonValue", "advancementValue", 
		"scoreParameter", "scoresValue", "selectorParameters", "parameter"
	};

	private static readonly string[] _LiteralNames = {
		null, "'..'", "' '", "'dx='", "'dy='", "'dz='", "'survival'", "'creative'", 
		"'adventure'", "'spectator'", "'!'", "'arbitrary'", "'furthest'", "'nearest'", 
		"'random'", "'gamemode'", "'advancements='", "'scores='", "'name='", "'type='", 
		"'predicate='", "'sort='", null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'['", "']'", "'{'", "'}'", "','", "'='", 
		null, null, "'distance='", null, "'level='", "'limit='", "'nbt='", "'tag='", 
		"'team='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "Misc", "Integer", 
		"IntInterval", "Number", "Double", "PositiveDouble", "TypeValue", "Path", 
		"EntityId", "Bool", "StringValue", "MarkValue", "FileReferrerValue", "OpenSquareBrackets", 
		"CloseSquareBrackets", "OpenCurlyBrace", "CloseCurlyBrace", "Comma", "Equal", 
		"NumberKey", "PositiveNumberKey", "PositiveDoubleIntervalKey", "DoubleIntervalKey", 
		"IntIntervalKey", "IntKey", "JsonKey", "TagKey", "TeamKey", "AdvancementPath", 
		"NameSpace", "TargetObjective", "Jkey", "Jobject", "Jpair", "Jarray", 
		"Jvalue", "AdvancementParameter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "selector.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static selectorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public selectorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public selectorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class IntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(selectorParser.Integer, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 0, RULE_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			Match(Integer);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntIntervalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Integer() { return GetTokens(selectorParser.Integer); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer(int i) {
			return GetToken(selectorParser.Integer, i);
		}
		public IntIntervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intInterval; } }
	}

	[RuleVersion(0)]
	public IntIntervalContext intInterval() {
		IntIntervalContext _localctx = new IntIntervalContext(Context, State);
		EnterRule(_localctx, 2, RULE_intInterval);
		try {
			State = 57;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 50;
				Match(Integer);
				State = 51;
				Match(T__0);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 52;
				Match(T__0);
				State = 53;
				Match(Integer);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 54;
				Match(Integer);
				State = 55;
				Match(T__0);
				State = 56;
				Match(Integer);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(selectorParser.Number, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 4, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			Match(Number);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositiveNumberContext : ParserRuleContext {
		public PositiveNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positiveNumber; } }
	}

	[RuleVersion(0)]
	public PositiveNumberContext positiveNumber() {
		PositiveNumberContext _localctx = new PositiveNumberContext(Context, State);
		EnterRule(_localctx, 6, RULE_positiveNumber);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 64;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 61;
					Match(T__1);
					}
					} 
				}
				State = 66;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 67;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 56L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 71;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 68;
					Match(T__1);
					}
					} 
				}
				State = 73;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(selectorParser.Double, 0); }
		public DoubleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double; } }
	}

	[RuleVersion(0)]
	public DoubleContext @double() {
		DoubleContext _localctx = new DoubleContext(Context, State);
		EnterRule(_localctx, 8, RULE_double);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(Double);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositiveDoubleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PositiveDouble() { return GetToken(selectorParser.PositiveDouble, 0); }
		public PositiveDoubleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positiveDouble; } }
	}

	[RuleVersion(0)]
	public PositiveDoubleContext positiveDouble() {
		PositiveDoubleContext _localctx = new PositiveDoubleContext(Context, State);
		EnterRule(_localctx, 10, RULE_positiveDouble);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(PositiveDouble);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleIntervalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Double() { return GetTokens(selectorParser.Double); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double(int i) {
			return GetToken(selectorParser.Double, i);
		}
		public DoubleIntervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleInterval; } }
	}

	[RuleVersion(0)]
	public DoubleIntervalContext doubleInterval() {
		DoubleIntervalContext _localctx = new DoubleIntervalContext(Context, State);
		EnterRule(_localctx, 12, RULE_doubleInterval);
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 78;
				Match(Double);
				State = 79;
				Match(T__0);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 80;
				Match(T__0);
				State = 81;
				Match(Double);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 82;
				Match(Double);
				State = 83;
				Match(T__0);
				State = 84;
				Match(Double);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 85;
				Match(Double);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositiveDoubleIntervalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PositiveDouble() { return GetTokens(selectorParser.PositiveDouble); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PositiveDouble(int i) {
			return GetToken(selectorParser.PositiveDouble, i);
		}
		public PositiveDoubleIntervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positiveDoubleInterval; } }
	}

	[RuleVersion(0)]
	public PositiveDoubleIntervalContext positiveDoubleInterval() {
		PositiveDoubleIntervalContext _localctx = new PositiveDoubleIntervalContext(Context, State);
		EnterRule(_localctx, 14, RULE_positiveDoubleInterval);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 88;
				Match(PositiveDouble);
				State = 89;
				Match(T__0);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 90;
				Match(T__0);
				State = 91;
				Match(PositiveDouble);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 92;
				Match(PositiveDouble);
				State = 93;
				Match(T__0);
				State = 94;
				Match(PositiveDouble);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 95;
				Match(PositiveDouble);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GamemodeValuesContext : ParserRuleContext {
		public GamemodeValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gamemodeValues; } }
	}

	[RuleVersion(0)]
	public GamemodeValuesContext gamemodeValues() {
		GamemodeValuesContext _localctx = new GamemodeValuesContext(Context, State);
		EnterRule(_localctx, 16, RULE_gamemodeValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 960L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EntityId() { return GetToken(selectorParser.EntityId, 0); }
		public EntityIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityId; } }
	}

	[RuleVersion(0)]
	public EntityIdContext entityId() {
		EntityIdContext _localctx = new EntityIdContext(Context, State);
		EnterRule(_localctx, 18, RULE_entityId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(EntityId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(selectorParser.Bool, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 20, RULE_bool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(Bool);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorTagValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MarkValue() { return GetToken(selectorParser.MarkValue, 0); }
		public SelectorTagValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectorTagValue; } }
	}

	[RuleVersion(0)]
	public SelectorTagValueContext selectorTagValue() {
		SelectorTagValueContext _localctx = new SelectorTagValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_selectorTagValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(MarkValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorTeamValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MarkValue() { return GetToken(selectorParser.MarkValue, 0); }
		public SelectorTeamValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectorTeamValue; } }
	}

	[RuleVersion(0)]
	public SelectorTeamValueContext selectorTeamValue() {
		SelectorTeamValueContext _localctx = new SelectorTeamValueContext(Context, State);
		EnterRule(_localctx, 24, RULE_selectorTeamValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(MarkValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringValue() { return GetToken(selectorParser.StringValue, 0); }
		public NameValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameValue; } }
	}

	[RuleVersion(0)]
	public NameValueContext nameValue() {
		NameValueContext _localctx = new NameValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_nameValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 108;
				Match(T__9);
				}
			}

			State = 111;
			Match(StringValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FileReferrerValue() { return GetToken(selectorParser.FileReferrerValue, 0); }
		public PredicateValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateValue; } }
	}

	[RuleVersion(0)]
	public PredicateValueContext predicateValue() {
		PredicateValueContext _localctx = new PredicateValueContext(Context, State);
		EnterRule(_localctx, 28, RULE_predicateValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(FileReferrerValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameSpaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NameSpace() { return GetToken(selectorParser.NameSpace, 0); }
		public NameSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameSpace; } }
	}

	[RuleVersion(0)]
	public NameSpaceContext nameSpace() {
		NameSpaceContext _localctx = new NameSpaceContext(Context, State);
		EnterRule(_localctx, 30, RULE_nameSpace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NameSpace) {
				{
				State = 115;
				Match(NameSpace);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetObjectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TargetObjective() { return GetToken(selectorParser.TargetObjective, 0); }
		public TargetObjectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_targetObjective; } }
	}

	[RuleVersion(0)]
	public TargetObjectiveContext targetObjective() {
		TargetObjectiveContext _localctx = new TargetObjectiveContext(Context, State);
		EnterRule(_localctx, 32, RULE_targetObjective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(TargetObjective);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Misc() { return GetToken(selectorParser.Misc, 0); }
		public SortValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortValues; } }
	}

	[RuleVersion(0)]
	public SortValuesContext sortValues() {
		SortValuesContext _localctx = new SortValuesContext(Context, State);
		EnterRule(_localctx, 34, RULE_sortValues);
		int _la;
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
			case T__11:
			case T__12:
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30720L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case Misc:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121;
				Match(Misc);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Jobject() { return GetToken(selectorParser.Jobject, 0); }
		public JsonValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValue; } }
	}

	[RuleVersion(0)]
	public JsonValueContext jsonValue() {
		JsonValueContext _localctx = new JsonValueContext(Context, State);
		EnterRule(_localctx, 36, RULE_jsonValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(Jobject);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdvancementValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenCurlyBrace() { return GetToken(selectorParser.OpenCurlyBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AdvancementParameter() { return GetTokens(selectorParser.AdvancementParameter); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AdvancementParameter(int i) {
			return GetToken(selectorParser.AdvancementParameter, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseCurlyBrace() { return GetToken(selectorParser.CloseCurlyBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(selectorParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(selectorParser.Comma, i);
		}
		public AdvancementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_advancementValue; } }
	}

	[RuleVersion(0)]
	public AdvancementValueContext advancementValue() {
		AdvancementValueContext _localctx = new AdvancementValueContext(Context, State);
		EnterRule(_localctx, 38, RULE_advancementValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(OpenCurlyBrace);
			State = 127;
			Match(AdvancementParameter);
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 128;
				Match(Comma);
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AdvancementParameter) {
					{
					State = 129;
					Match(AdvancementParameter);
					}
				}

				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 137;
			Match(CloseCurlyBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoreParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TargetObjectiveContext targetObjective() {
			return GetRuleContext<TargetObjectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(selectorParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(selectorParser.Integer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntInterval() { return GetToken(selectorParser.IntInterval, 0); }
		public ScoreParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoreParameter; } }
	}

	[RuleVersion(0)]
	public ScoreParameterContext scoreParameter() {
		ScoreParameterContext _localctx = new ScoreParameterContext(Context, State);
		EnterRule(_localctx, 40, RULE_scoreParameter);
		try {
			State = 144;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TargetObjective:
				EnterOuterAlt(_localctx, 1);
				{
				State = 139;
				targetObjective();
				State = 140;
				Match(Equal);
				State = 141;
				Match(Integer);
				}
				break;
			case IntInterval:
				EnterOuterAlt(_localctx, 2);
				{
				State = 143;
				Match(IntInterval);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoresValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenCurlyBrace() { return GetToken(selectorParser.OpenCurlyBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScoreParameterContext[] scoreParameter() {
			return GetRuleContexts<ScoreParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScoreParameterContext scoreParameter(int i) {
			return GetRuleContext<ScoreParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseCurlyBrace() { return GetToken(selectorParser.CloseCurlyBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(selectorParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(selectorParser.Comma, i);
		}
		public ScoresValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoresValue; } }
	}

	[RuleVersion(0)]
	public ScoresValueContext scoresValue() {
		ScoresValueContext _localctx = new ScoresValueContext(Context, State);
		EnterRule(_localctx, 42, RULE_scoresValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(OpenCurlyBrace);
			State = 147;
			scoreParameter();
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 148;
				Match(Comma);
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IntInterval || _la==TargetObjective) {
					{
					State = 149;
					scoreParameter();
					}
				}

				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 157;
			Match(CloseCurlyBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(selectorParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(selectorParser.Comma, i);
		}
		public SelectorParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectorParameters; } }
	}

	[RuleVersion(0)]
	public SelectorParametersContext selectorParameters() {
		SelectorParametersContext _localctx = new SelectorParametersContext(Context, State);
		EnterRule(_localctx, 44, RULE_selectorParameters);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			parameter();
			State = 166;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 160;
					Match(Comma);
					State = 162;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1123700887748608L) != 0)) {
						{
						State = 161;
						parameter();
						}
					}

					}
					} 
				}
				State = 168;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberKey() { return GetToken(selectorParser.NumberKey, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PositiveNumberKey() { return GetToken(selectorParser.PositiveNumberKey, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PositiveNumberContext positiveNumber() {
			return GetRuleContext<PositiveNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleIntervalKey() { return GetToken(selectorParser.DoubleIntervalKey, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DoubleIntervalContext doubleInterval() {
			return GetRuleContext<DoubleIntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PositiveDoubleIntervalKey() { return GetToken(selectorParser.PositiveDoubleIntervalKey, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PositiveDoubleIntervalContext positiveDoubleInterval() {
			return GetRuleContext<PositiveDoubleIntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntIntervalKey() { return GetToken(selectorParser.IntIntervalKey, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntIntervalContext intInterval() {
			return GetRuleContext<IntIntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GamemodeValuesContext gamemodeValues() {
			return GetRuleContext<GamemodeValuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdvancementValueContext advancementValue() {
			return GetRuleContext<AdvancementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScoresValueContext scoresValue() {
			return GetRuleContext<ScoresValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntKey() { return GetToken(selectorParser.IntKey, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TagKey() { return GetToken(selectorParser.TagKey, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorTagValueContext selectorTagValue() {
			return GetRuleContext<SelectorTagValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TeamKey() { return GetToken(selectorParser.TeamKey, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorTeamValueContext selectorTeamValue() {
			return GetRuleContext<SelectorTeamValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameValueContext nameValue() {
			return GetRuleContext<NameValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityIdContext entityId() {
			return GetRuleContext<EntityIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateValueContext predicateValue() {
			return GetRuleContext<PredicateValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JsonKey() { return GetToken(selectorParser.JsonKey, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonValueContext jsonValue() {
			return GetRuleContext<JsonValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortValuesContext sortValues() {
			return GetRuleContext<SortValuesContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 46, RULE_parameter);
		try {
			State = 201;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NumberKey:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 169;
				Match(NumberKey);
				State = 170;
				number();
				}
				}
				break;
			case PositiveNumberKey:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 171;
				Match(PositiveNumberKey);
				State = 172;
				positiveNumber();
				}
				}
				break;
			case DoubleIntervalKey:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 173;
				Match(DoubleIntervalKey);
				State = 174;
				doubleInterval();
				}
				}
				break;
			case PositiveDoubleIntervalKey:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 175;
				Match(PositiveDoubleIntervalKey);
				State = 176;
				positiveDoubleInterval();
				}
				}
				break;
			case IntIntervalKey:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 177;
				Match(IntIntervalKey);
				State = 178;
				intInterval();
				}
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 179;
				Match(T__14);
				State = 180;
				gamemodeValues();
				}
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 7);
				{
				{
				State = 181;
				Match(T__15);
				State = 182;
				advancementValue();
				}
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 8);
				{
				{
				State = 183;
				Match(T__16);
				State = 184;
				scoresValue();
				}
				}
				break;
			case IntKey:
				EnterOuterAlt(_localctx, 9);
				{
				{
				State = 185;
				Match(IntKey);
				State = 186;
				@int();
				}
				}
				break;
			case TagKey:
				EnterOuterAlt(_localctx, 10);
				{
				{
				State = 187;
				Match(TagKey);
				State = 188;
				selectorTagValue();
				}
				}
				break;
			case TeamKey:
				EnterOuterAlt(_localctx, 11);
				{
				{
				State = 189;
				Match(TeamKey);
				State = 190;
				selectorTeamValue();
				}
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 12);
				{
				{
				State = 191;
				Match(T__17);
				State = 192;
				nameValue();
				}
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 13);
				{
				{
				State = 193;
				Match(T__18);
				State = 194;
				entityId();
				}
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 14);
				{
				{
				State = 195;
				Match(T__19);
				State = 196;
				predicateValue();
				}
				}
				break;
			case JsonKey:
				EnterOuterAlt(_localctx, 15);
				{
				{
				State = 197;
				Match(JsonKey);
				State = 198;
				jsonValue();
				}
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 16);
				{
				{
				State = 199;
				Match(T__20);
				State = 200;
				sortValues();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,58,204,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,58,8,1,1,2,
		1,2,1,3,5,3,63,8,3,10,3,12,3,66,9,3,1,3,1,3,5,3,70,8,3,10,3,12,3,73,9,
		3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,87,8,6,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,3,7,97,8,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,
		12,1,12,1,13,3,13,110,8,13,1,13,1,13,1,14,1,14,1,15,3,15,117,8,15,1,16,
		1,16,1,17,1,17,3,17,123,8,17,1,18,1,18,1,19,1,19,1,19,1,19,3,19,131,8,
		19,5,19,133,8,19,10,19,12,19,136,9,19,1,19,1,19,1,20,1,20,1,20,1,20,1,
		20,3,20,145,8,20,1,21,1,21,1,21,1,21,3,21,151,8,21,5,21,153,8,21,10,21,
		12,21,156,9,21,1,21,1,21,1,22,1,22,1,22,3,22,163,8,22,5,22,165,8,22,10,
		22,12,22,168,9,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,202,8,23,1,23,3,64,71,166,0,
		24,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		0,3,1,0,3,5,1,0,6,9,1,0,11,14,214,0,48,1,0,0,0,2,57,1,0,0,0,4,59,1,0,0,
		0,6,64,1,0,0,0,8,74,1,0,0,0,10,76,1,0,0,0,12,86,1,0,0,0,14,96,1,0,0,0,
		16,98,1,0,0,0,18,100,1,0,0,0,20,102,1,0,0,0,22,104,1,0,0,0,24,106,1,0,
		0,0,26,109,1,0,0,0,28,113,1,0,0,0,30,116,1,0,0,0,32,118,1,0,0,0,34,122,
		1,0,0,0,36,124,1,0,0,0,38,126,1,0,0,0,40,144,1,0,0,0,42,146,1,0,0,0,44,
		159,1,0,0,0,46,201,1,0,0,0,48,49,5,23,0,0,49,1,1,0,0,0,50,51,5,23,0,0,
		51,58,5,1,0,0,52,53,5,1,0,0,53,58,5,23,0,0,54,55,5,23,0,0,55,56,5,1,0,
		0,56,58,5,23,0,0,57,50,1,0,0,0,57,52,1,0,0,0,57,54,1,0,0,0,58,3,1,0,0,
		0,59,60,5,25,0,0,60,5,1,0,0,0,61,63,5,2,0,0,62,61,1,0,0,0,63,66,1,0,0,
		0,64,65,1,0,0,0,64,62,1,0,0,0,65,67,1,0,0,0,66,64,1,0,0,0,67,71,7,0,0,
		0,68,70,5,2,0,0,69,68,1,0,0,0,70,73,1,0,0,0,71,72,1,0,0,0,71,69,1,0,0,
		0,72,7,1,0,0,0,73,71,1,0,0,0,74,75,5,26,0,0,75,9,1,0,0,0,76,77,5,27,0,
		0,77,11,1,0,0,0,78,79,5,26,0,0,79,87,5,1,0,0,80,81,5,1,0,0,81,87,5,26,
		0,0,82,83,5,26,0,0,83,84,5,1,0,0,84,87,5,26,0,0,85,87,5,26,0,0,86,78,1,
		0,0,0,86,80,1,0,0,0,86,82,1,0,0,0,86,85,1,0,0,0,87,13,1,0,0,0,88,89,5,
		27,0,0,89,97,5,1,0,0,90,91,5,1,0,0,91,97,5,27,0,0,92,93,5,27,0,0,93,94,
		5,1,0,0,94,97,5,27,0,0,95,97,5,27,0,0,96,88,1,0,0,0,96,90,1,0,0,0,96,92,
		1,0,0,0,96,95,1,0,0,0,97,15,1,0,0,0,98,99,7,1,0,0,99,17,1,0,0,0,100,101,
		5,30,0,0,101,19,1,0,0,0,102,103,5,31,0,0,103,21,1,0,0,0,104,105,5,33,0,
		0,105,23,1,0,0,0,106,107,5,33,0,0,107,25,1,0,0,0,108,110,5,10,0,0,109,
		108,1,0,0,0,109,110,1,0,0,0,110,111,1,0,0,0,111,112,5,32,0,0,112,27,1,
		0,0,0,113,114,5,34,0,0,114,29,1,0,0,0,115,117,5,51,0,0,116,115,1,0,0,0,
		116,117,1,0,0,0,117,31,1,0,0,0,118,119,5,52,0,0,119,33,1,0,0,0,120,123,
		7,2,0,0,121,123,5,22,0,0,122,120,1,0,0,0,122,121,1,0,0,0,123,35,1,0,0,
		0,124,125,5,54,0,0,125,37,1,0,0,0,126,127,5,37,0,0,127,134,5,58,0,0,128,
		130,5,39,0,0,129,131,5,58,0,0,130,129,1,0,0,0,130,131,1,0,0,0,131,133,
		1,0,0,0,132,128,1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,
		0,135,137,1,0,0,0,136,134,1,0,0,0,137,138,5,38,0,0,138,39,1,0,0,0,139,
		140,3,32,16,0,140,141,5,40,0,0,141,142,5,23,0,0,142,145,1,0,0,0,143,145,
		5,24,0,0,144,139,1,0,0,0,144,143,1,0,0,0,145,41,1,0,0,0,146,147,5,37,0,
		0,147,154,3,40,20,0,148,150,5,39,0,0,149,151,3,40,20,0,150,149,1,0,0,0,
		150,151,1,0,0,0,151,153,1,0,0,0,152,148,1,0,0,0,153,156,1,0,0,0,154,152,
		1,0,0,0,154,155,1,0,0,0,155,157,1,0,0,0,156,154,1,0,0,0,157,158,5,38,0,
		0,158,43,1,0,0,0,159,166,3,46,23,0,160,162,5,39,0,0,161,163,3,46,23,0,
		162,161,1,0,0,0,162,163,1,0,0,0,163,165,1,0,0,0,164,160,1,0,0,0,165,168,
		1,0,0,0,166,167,1,0,0,0,166,164,1,0,0,0,167,45,1,0,0,0,168,166,1,0,0,0,
		169,170,5,41,0,0,170,202,3,4,2,0,171,172,5,42,0,0,172,202,3,6,3,0,173,
		174,5,44,0,0,174,202,3,12,6,0,175,176,5,43,0,0,176,202,3,14,7,0,177,178,
		5,45,0,0,178,202,3,2,1,0,179,180,5,15,0,0,180,202,3,16,8,0,181,182,5,16,
		0,0,182,202,3,38,19,0,183,184,5,17,0,0,184,202,3,42,21,0,185,186,5,46,
		0,0,186,202,3,0,0,0,187,188,5,48,0,0,188,202,3,22,11,0,189,190,5,49,0,
		0,190,202,3,24,12,0,191,192,5,18,0,0,192,202,3,26,13,0,193,194,5,19,0,
		0,194,202,3,18,9,0,195,196,5,20,0,0,196,202,3,28,14,0,197,198,5,47,0,0,
		198,202,3,36,18,0,199,200,5,21,0,0,200,202,3,34,17,0,201,169,1,0,0,0,201,
		171,1,0,0,0,201,173,1,0,0,0,201,175,1,0,0,0,201,177,1,0,0,0,201,179,1,
		0,0,0,201,181,1,0,0,0,201,183,1,0,0,0,201,185,1,0,0,0,201,187,1,0,0,0,
		201,189,1,0,0,0,201,191,1,0,0,0,201,193,1,0,0,0,201,195,1,0,0,0,201,197,
		1,0,0,0,201,199,1,0,0,0,202,47,1,0,0,0,16,57,64,71,86,96,109,116,122,130,
		134,144,150,154,162,166,201
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
