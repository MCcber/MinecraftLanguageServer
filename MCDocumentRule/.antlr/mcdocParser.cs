//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/C#Project/MinecraftLanguageServer/MCDocumentRule/mcdocParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class mcdocParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, As=2, At=3, QuestionMark=4, Dot=5, TypeKey=6, StructKeyType=7, Inject=8, 
		Enum=9, Use=10, To=11, Dispatch=12, Fallback=13, None=14, Unknown=15, 
		Parent=16, Key=17, Plus=18, Remainder=19, Equal=20, Sharp=21, SquareBrackets=22, 
		LeftSquareBracket=23, RightSquareBracket=24, RoundBrackets=25, LeftRoundBracket=26, 
		RightRoundBracket=27, CurlyBrackets=28, LeftCurlyBracket=29, RightCurlyBracket=30, 
		AngleBrackets=31, LeftAngleBracket=32, RightAngleBracket=33, LogicalOR=34, 
		Comma=35, DoubleColon=36, ColonMark=37, TripleDot=38, DoubleDot=39, ByteKeyType=40, 
		IntKeyType=41, LongKeyType=42, StringKeyType=43, BooleanKeyType=44, ShortKeyType=45, 
		FloatKeyType=46, DoubleKeyType=47, Any=48, BoolValue=49, DocCommentary=50, 
		Commentary=51, DoubleQuotes=52, TypedNumberLexer=53, Integer=54, Float=55, 
		PositiveInteger=56, IntTypedUnit=57, FloatTypedUnit=58, IntegerRange=59, 
		FloatRange=60, Identifier=61, String=62, ResourceLocationChar=63, ResourceLocation=64, 
		PathSegment=65, Path=66;
	public const int
		RULE_logicalOR = 0, RULE_path = 1, RULE_resourceLocation = 2, RULE_at = 3, 
		RULE_as = 4, RULE_dot = 5, RULE_baseDataType = 6, RULE_keywordType = 7, 
		RULE_questionMark = 8, RULE_typeKey = 9, RULE_structKeyType = 10, RULE_inject = 11, 
		RULE_enum = 12, RULE_use = 13, RULE_dispatch = 14, RULE_doubleDot = 15, 
		RULE_integer = 16, RULE_float = 17, RULE_integerRange = 18, RULE_identifier = 19, 
		RULE_commentary = 20, RULE_docCommentary = 21, RULE_typedNumber = 22, 
		RULE_stringType = 23, RULE_literalType = 24, RULE_numericType = 25, RULE_primitiveArrayType = 26, 
		RULE_listType = 27, RULE_tupleType = 28, RULE_enumMemberType = 29, RULE_enumValue = 30, 
		RULE_enumField = 31, RULE_enumBlock = 32, RULE_enumType = 33, RULE_prelim = 34, 
		RULE_referenceType = 35, RULE_dispatcherType = 36, RULE_unionType = 37, 
		RULE_staticIndexKey = 38, RULE_accessor = 39, RULE_accessorKey = 40, RULE_dynamicIndex = 41, 
		RULE_indexWithOutDynamic = 42, RULE_indexWithDynamic = 43, RULE_indexBodyWithOutDynamic = 44, 
		RULE_indexBodyWithDynamic = 45, RULE_indexingOnAType = 46, RULE_typeArgBlock = 47, 
		RULE_unAttributedType = 48, RULE_typeSentence = 49, RULE_attributeSet = 50, 
		RULE_arrayLength = 51, RULE_string = 52, RULE_positionalValues = 53, RULE_namedValue = 54, 
		RULE_namedValues = 55, RULE_treeBody = 56, RULE_treeValue = 57, RULE_value = 58, 
		RULE_attribute = 59, RULE_dispatchStatement = 60, RULE_structInjection = 61, 
		RULE_enumInjection = 62, RULE_injection = 63, RULE_useStatement = 64, 
		RULE_typeParam = 65, RULE_typeParamBlock = 66, RULE_typeAlias = 67, RULE_structKey = 68, 
		RULE_structField = 69, RULE_structBlock = 70, RULE_struct = 71, RULE_file = 72;
	public static readonly string[] ruleNames = {
		"logicalOR", "path", "resourceLocation", "at", "as", "dot", "baseDataType", 
		"keywordType", "questionMark", "typeKey", "structKeyType", "inject", "enum", 
		"use", "dispatch", "doubleDot", "integer", "float", "integerRange", "identifier", 
		"commentary", "docCommentary", "typedNumber", "stringType", "literalType", 
		"numericType", "primitiveArrayType", "listType", "tupleType", "enumMemberType", 
		"enumValue", "enumField", "enumBlock", "enumType", "prelim", "referenceType", 
		"dispatcherType", "unionType", "staticIndexKey", "accessor", "accessorKey", 
		"dynamicIndex", "indexWithOutDynamic", "indexWithDynamic", "indexBodyWithOutDynamic", 
		"indexBodyWithDynamic", "indexingOnAType", "typeArgBlock", "unAttributedType", 
		"typeSentence", "attributeSet", "arrayLength", "string", "positionalValues", 
		"namedValue", "namedValues", "treeBody", "treeValue", "value", "attribute", 
		"dispatchStatement", "structInjection", "enumInjection", "injection", 
		"useStatement", "typeParam", "typeParamBlock", "typeAlias", "structKey", 
		"structField", "structBlock", "struct", "file"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'as'", "'@'", "'?'", "'.'", "'type '", "'struct'", "'inject'", 
		"'enum'", "'use'", "'to'", "'dispatch'", "'%fallback'", "'%none'", "'%unknown'", 
		"'%parent'", "'%key'", "'+'", "'%'", "'='", "'#'", "'[]'", "'['", "']'", 
		"'()'", "'('", "')'", "'{}'", "'{'", "'}'", "'<>'", "'<'", "'>'", "'|'", 
		"','", "'::'", "':'", "'...'", "'..'", "'byte'", "'int'", "'long'", "'string'", 
		"'boolean'", "'short'", "'float'", "'double'", "'any'", null, null, null, 
		"'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "As", "At", "QuestionMark", "Dot", "TypeKey", "StructKeyType", 
		"Inject", "Enum", "Use", "To", "Dispatch", "Fallback", "None", "Unknown", 
		"Parent", "Key", "Plus", "Remainder", "Equal", "Sharp", "SquareBrackets", 
		"LeftSquareBracket", "RightSquareBracket", "RoundBrackets", "LeftRoundBracket", 
		"RightRoundBracket", "CurlyBrackets", "LeftCurlyBracket", "RightCurlyBracket", 
		"AngleBrackets", "LeftAngleBracket", "RightAngleBracket", "LogicalOR", 
		"Comma", "DoubleColon", "ColonMark", "TripleDot", "DoubleDot", "ByteKeyType", 
		"IntKeyType", "LongKeyType", "StringKeyType", "BooleanKeyType", "ShortKeyType", 
		"FloatKeyType", "DoubleKeyType", "Any", "BoolValue", "DocCommentary", 
		"Commentary", "DoubleQuotes", "TypedNumberLexer", "Integer", "Float", 
		"PositiveInteger", "IntTypedUnit", "FloatTypedUnit", "IntegerRange", "FloatRange", 
		"Identifier", "String", "ResourceLocationChar", "ResourceLocation", "PathSegment", 
		"Path"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "mcdocParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static mcdocParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public mcdocParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public mcdocParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LogicalORContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LogicalOR() { return GetToken(mcdocParser.LogicalOR, 0); }
		public LogicalORContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOR; } }
	}

	[RuleVersion(0)]
	public LogicalORContext logicalOR() {
		LogicalORContext _localctx = new LogicalORContext(Context, State);
		EnterRule(_localctx, 0, RULE_logicalOR);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(LogicalOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Path() { return GetToken(mcdocParser.Path, 0); }
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 2, RULE_path);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(Path);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ResourceLocation() { return GetToken(mcdocParser.ResourceLocation, 0); }
		public ResourceLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceLocation; } }
	}

	[RuleVersion(0)]
	public ResourceLocationContext resourceLocation() {
		ResourceLocationContext _localctx = new ResourceLocationContext(Context, State);
		EnterRule(_localctx, 4, RULE_resourceLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(ResourceLocation);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At() { return GetToken(mcdocParser.At, 0); }
		public AtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_at; } }
	}

	[RuleVersion(0)]
	public AtContext at() {
		AtContext _localctx = new AtContext(Context, State);
		EnterRule(_localctx, 6, RULE_at);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(At);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(mcdocParser.As, 0); }
		public AsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as; } }
	}

	[RuleVersion(0)]
	public AsContext @as() {
		AsContext _localctx = new AsContext(Context, State);
		EnterRule(_localctx, 8, RULE_as);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(As);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(mcdocParser.Dot, 0); }
		public DotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dot; } }
	}

	[RuleVersion(0)]
	public DotContext dot() {
		DotContext _localctx = new DotContext(Context, State);
		EnterRule(_localctx, 10, RULE_dot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(Dot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseDataTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyType() { return GetToken(mcdocParser.StringKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanKeyType() { return GetToken(mcdocParser.BooleanKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ByteKeyType() { return GetToken(mcdocParser.ByteKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShortKeyType() { return GetToken(mcdocParser.ShortKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntKeyType() { return GetToken(mcdocParser.IntKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatKeyType() { return GetToken(mcdocParser.FloatKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleKeyType() { return GetToken(mcdocParser.DoubleKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LongKeyType() { return GetToken(mcdocParser.LongKeyType, 0); }
		public BaseDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseDataType; } }
	}

	[RuleVersion(0)]
	public BaseDataTypeContext baseDataType() {
		BaseDataTypeContext _localctx = new BaseDataTypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_baseDataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 280375465082880L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Any() { return GetToken(mcdocParser.Any, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolValue() { return GetToken(mcdocParser.BoolValue, 0); }
		public KeywordTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordType; } }
	}

	[RuleVersion(0)]
	public KeywordTypeContext keywordType() {
		KeywordTypeContext _localctx = new KeywordTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_keywordType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			_la = TokenStream.LA(1);
			if ( !(_la==Any || _la==BoolValue) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuestionMarkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(mcdocParser.QuestionMark, 0); }
		public QuestionMarkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_questionMark; } }
	}

	[RuleVersion(0)]
	public QuestionMarkContext questionMark() {
		QuestionMarkContext _localctx = new QuestionMarkContext(Context, State);
		EnterRule(_localctx, 16, RULE_questionMark);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(QuestionMark);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeKey() { return GetToken(mcdocParser.TypeKey, 0); }
		public TypeKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeKey; } }
	}

	[RuleVersion(0)]
	public TypeKeyContext typeKey() {
		TypeKeyContext _localctx = new TypeKeyContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeKey);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(TypeKey);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructKeyTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StructKeyType() { return GetToken(mcdocParser.StructKeyType, 0); }
		public StructKeyTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structKeyType; } }
	}

	[RuleVersion(0)]
	public StructKeyTypeContext structKeyType() {
		StructKeyTypeContext _localctx = new StructKeyTypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_structKeyType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(StructKeyType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inject() { return GetToken(mcdocParser.Inject, 0); }
		public InjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inject; } }
	}

	[RuleVersion(0)]
	public InjectContext inject() {
		InjectContext _localctx = new InjectContext(Context, State);
		EnterRule(_localctx, 22, RULE_inject);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(Inject);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(mcdocParser.Enum, 0); }
		public EnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum; } }
	}

	[RuleVersion(0)]
	public EnumContext @enum() {
		EnumContext _localctx = new EnumContext(Context, State);
		EnterRule(_localctx, 24, RULE_enum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(Enum);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Use() { return GetToken(mcdocParser.Use, 0); }
		public UseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use; } }
	}

	[RuleVersion(0)]
	public UseContext use() {
		UseContext _localctx = new UseContext(Context, State);
		EnterRule(_localctx, 26, RULE_use);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(Use);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DispatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dispatch() { return GetToken(mcdocParser.Dispatch, 0); }
		public DispatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dispatch; } }
	}

	[RuleVersion(0)]
	public DispatchContext dispatch() {
		DispatchContext _localctx = new DispatchContext(Context, State);
		EnterRule(_localctx, 28, RULE_dispatch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(Dispatch);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleDotContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleDot() { return GetToken(mcdocParser.DoubleDot, 0); }
		public DoubleDotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleDot; } }
	}

	[RuleVersion(0)]
	public DoubleDotContext doubleDot() {
		DoubleDotContext _localctx = new DoubleDotContext(Context, State);
		EnterRule(_localctx, 30, RULE_doubleDot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(DoubleDot);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(mcdocParser.Integer, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 32, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(Integer);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(mcdocParser.Float, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 34, RULE_float);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(Float);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerRange() { return GetToken(mcdocParser.IntegerRange, 0); }
		public IntegerRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerRange; } }
	}

	[RuleVersion(0)]
	public IntegerRangeContext integerRange() {
		IntegerRangeContext _localctx = new IntegerRangeContext(Context, State);
		EnterRule(_localctx, 36, RULE_integerRange);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(IntegerRange);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(mcdocParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Commentary() { return GetToken(mcdocParser.Commentary, 0); }
		public CommentaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentary; } }
	}

	[RuleVersion(0)]
	public CommentaryContext commentary() {
		CommentaryContext _localctx = new CommentaryContext(Context, State);
		EnterRule(_localctx, 40, RULE_commentary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(Commentary);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DocCommentaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DocCommentary() { return GetToken(mcdocParser.DocCommentary, 0); }
		public DocCommentaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_docCommentary; } }
	}

	[RuleVersion(0)]
	public DocCommentaryContext docCommentary() {
		DocCommentaryContext _localctx = new DocCommentaryContext(Context, State);
		EnterRule(_localctx, 42, RULE_docCommentary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(DocCommentary);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntTypedUnit() { return GetToken(mcdocParser.IntTypedUnit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatTypedUnit() { return GetToken(mcdocParser.FloatTypedUnit, 0); }
		public TypedNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedNumber; } }
	}

	[RuleVersion(0)]
	public TypedNumberContext typedNumber() {
		TypedNumberContext _localctx = new TypedNumberContext(Context, State);
		EnterRule(_localctx, 44, RULE_typedNumber);
		int _la;
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integer:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 190;
				integer();
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IntTypedUnit) {
					{
					State = 191;
					Match(IntTypedUnit);
					}
				}

				}
				}
				break;
			case Float:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 194;
				@float();
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FloatTypedUnit) {
					{
					State = 195;
					Match(FloatTypedUnit);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyType() { return GetToken(mcdocParser.StringKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtContext at() {
			return GetRuleContext<AtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerRange() { return GetToken(mcdocParser.IntegerRange, 0); }
		public StringTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringType; } }
	}

	[RuleVersion(0)]
	public StringTypeContext stringType() {
		StringTypeContext _localctx = new StringTypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_stringType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			Match(StringKeyType);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==At) {
				{
				State = 201;
				at();
				State = 202;
				Match(IntegerRange);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolValue() { return GetToken(mcdocParser.BoolValue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypedNumberLexer() { return GetToken(mcdocParser.TypedNumberLexer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(mcdocParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(mcdocParser.Identifier, 0); }
		public LiteralTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalType; } }
	}

	[RuleVersion(0)]
	public LiteralTypeContext literalType() {
		LiteralTypeContext _localctx = new LiteralTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_literalType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 6927099176849244160L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseDataTypeContext baseDataType() {
			return GetRuleContext<BaseDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtContext at() {
			return GetRuleContext<AtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerRangeContext integerRange() {
			return GetRuleContext<IntegerRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public NumericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericType; } }
	}

	[RuleVersion(0)]
	public NumericTypeContext numericType() {
		NumericTypeContext _localctx = new NumericTypeContext(Context, State);
		EnterRule(_localctx, 50, RULE_numericType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			baseDataType();
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==At) {
				{
				State = 209;
				at();
				State = 212;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IntegerRange:
					{
					State = 210;
					integerRange();
					}
					break;
				case Integer:
					{
					State = 211;
					integer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SquareBrackets() { return GetToken(mcdocParser.SquareBrackets, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ByteKeyType() { return GetToken(mcdocParser.ByteKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntKeyType() { return GetToken(mcdocParser.IntKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LongKeyType() { return GetToken(mcdocParser.LongKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtContext[] at() {
			return GetRuleContexts<AtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtContext at(int i) {
			return GetRuleContext<AtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(mcdocParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(mcdocParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerRangeContext[] integerRange() {
			return GetRuleContexts<IntegerRangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerRangeContext integerRange(int i) {
			return GetRuleContext<IntegerRangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext[] integer() {
			return GetRuleContexts<IntegerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer(int i) {
			return GetRuleContext<IntegerContext>(i);
		}
		public PrimitiveArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveArrayType; } }
	}

	[RuleVersion(0)]
	public PrimitiveArrayTypeContext primitiveArrayType() {
		PrimitiveArrayTypeContext _localctx = new PrimitiveArrayTypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_primitiveArrayType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7696581394432L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==At) {
				{
				State = 217;
				at();
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 218;
					Match(WS);
					}
					}
					State = 223;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 226;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IntegerRange:
					{
					State = 224;
					integerRange();
					}
					break;
				case Integer:
					{
					State = 225;
					integer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 230;
			Match(SquareBrackets);
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 231;
				Match(WS);
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==At) {
				{
				State = 237;
				at();
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 238;
					Match(WS);
					}
					}
					State = 243;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 246;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IntegerRange:
					{
					State = 244;
					integerRange();
					}
					break;
				case Integer:
					{
					State = 245;
					integer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftSquareBracket() { return GetToken(mcdocParser.LeftSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSentenceContext typeSentence() {
			return GetRuleContext<TypeSentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightSquareBracket() { return GetToken(mcdocParser.RightSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtContext at() {
			return GetRuleContext<AtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerRangeContext integerRange() {
			return GetRuleContext<IntegerRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public ListTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listType; } }
	}

	[RuleVersion(0)]
	public ListTypeContext listType() {
		ListTypeContext _localctx = new ListTypeContext(Context, State);
		EnterRule(_localctx, 54, RULE_listType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			Match(LeftSquareBracket);
			State = 251;
			typeSentence();
			State = 252;
			Match(RightSquareBracket);
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==At) {
				{
				State = 253;
				at();
				State = 256;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IntegerRange:
					{
					State = 254;
					integerRange();
					}
					break;
				case Integer:
					{
					State = 255;
					integer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftSquareBracket() { return GetToken(mcdocParser.LeftSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSentenceContext[] typeSentence() {
			return GetRuleContexts<TypeSentenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSentenceContext typeSentence(int i) {
			return GetRuleContext<TypeSentenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(mcdocParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(mcdocParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightSquareBracket() { return GetToken(mcdocParser.RightSquareBracket, 0); }
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 56, RULE_tupleType);
		int _la;
		try {
			int _alt;
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 260;
				Match(LeftSquareBracket);
				State = 261;
				typeSentence();
				State = 262;
				Match(Comma);
				State = 263;
				Match(RightSquareBracket);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 265;
				Match(LeftSquareBracket);
				State = 266;
				typeSentence();
				State = 269;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 267;
						Match(Comma);
						State = 268;
						typeSentence();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 271;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 273;
					Match(Comma);
					}
				}

				State = 276;
				Match(RightSquareBracket);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyType() { return GetToken(mcdocParser.StringKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ByteKeyType() { return GetToken(mcdocParser.ByteKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShortKeyType() { return GetToken(mcdocParser.ShortKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntKeyType() { return GetToken(mcdocParser.IntKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LongKeyType() { return GetToken(mcdocParser.LongKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatKeyType() { return GetToken(mcdocParser.FloatKeyType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleKeyType() { return GetToken(mcdocParser.DoubleKeyType, 0); }
		public EnumMemberTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMemberType; } }
	}

	[RuleVersion(0)]
	public EnumMemberTypeContext enumMemberType() {
		EnumMemberTypeContext _localctx = new EnumMemberTypeContext(Context, State);
		EnterRule(_localctx, 58, RULE_enumMemberType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 262783279038464L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedNumberContext typedNumber() {
			return GetRuleContext<TypedNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 60, RULE_enumValue);
		try {
			State = 284;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integer:
			case Float:
				EnterOuterAlt(_localctx, 1);
				{
				State = 282;
				typedNumber();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 283;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(mcdocParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue() {
			return GetRuleContext<EnumValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrelimContext[] prelim() {
			return GetRuleContexts<PrelimContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrelimContext prelim(int i) {
			return GetRuleContext<PrelimContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public EnumFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumField; } }
	}

	[RuleVersion(0)]
	public EnumFieldContext enumField() {
		EnumFieldContext _localctx = new EnumFieldContext(Context, State);
		EnterRule(_localctx, 62, RULE_enumField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DocCommentary || _la==Commentary) {
				{
				{
				State = 286;
				prelim();
				}
				}
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Sharp) {
				{
				{
				State = 292;
				attribute();
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 298;
			identifier();
			State = 299;
			Match(Equal);
			State = 300;
			enumValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CurlyBrackets() { return GetToken(mcdocParser.CurlyBrackets, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftCurlyBracket() { return GetToken(mcdocParser.LeftCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumFieldContext[] enumField() {
			return GetRuleContexts<EnumFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumFieldContext enumField(int i) {
			return GetRuleContext<EnumFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightCurlyBracket() { return GetToken(mcdocParser.RightCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(mcdocParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(mcdocParser.Comma, i);
		}
		public EnumBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBlock; } }
	}

	[RuleVersion(0)]
	public EnumBlockContext enumBlock() {
		EnumBlockContext _localctx = new EnumBlockContext(Context, State);
		EnterRule(_localctx, 64, RULE_enumBlock);
		int _la;
		try {
			int _alt;
			State = 317;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CurlyBrackets:
				EnterOuterAlt(_localctx, 1);
				{
				State = 302;
				Match(CurlyBrackets);
				}
				break;
			case LeftCurlyBracket:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 303;
				Match(LeftCurlyBracket);
				State = 304;
				enumField();
				State = 309;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 305;
						Match(Comma);
						State = 306;
						enumField();
						}
						} 
					}
					State = 311;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				}
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 312;
					Match(Comma);
					}
				}

				State = 315;
				Match(RightCurlyBracket);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumContext @enum() {
			return GetRuleContext<EnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftRoundBracket() { return GetToken(mcdocParser.LeftRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberTypeContext enumMemberType() {
			return GetRuleContext<EnumMemberTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightRoundBracket() { return GetToken(mcdocParser.RightRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBlockContext enumBlock() {
			return GetRuleContext<EnumBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrelimContext prelim() {
			return GetRuleContext<PrelimContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumType; } }
	}

	[RuleVersion(0)]
	public EnumTypeContext enumType() {
		EnumTypeContext _localctx = new EnumTypeContext(Context, State);
		EnterRule(_localctx, 66, RULE_enumType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DocCommentary || _la==Commentary) {
				{
				State = 319;
				prelim();
				}
			}

			State = 322;
			@enum();
			State = 323;
			Match(LeftRoundBracket);
			State = 324;
			enumMemberType();
			State = 325;
			Match(RightRoundBracket);
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 326;
				identifier();
				}
			}

			State = 329;
			enumBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrelimContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DocCommentaryContext docCommentary() {
			return GetRuleContext<DocCommentaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentaryContext commentary() {
			return GetRuleContext<CommentaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public PrelimContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prelim; } }
	}

	[RuleVersion(0)]
	public PrelimContext prelim() {
		PrelimContext _localctx = new PrelimContext(Context, State);
		EnterRule(_localctx, 68, RULE_prelim);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DocCommentary:
				{
				State = 331;
				docCommentary();
				}
				break;
			case Commentary:
				{
				State = 332;
				commentary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 335;
				attribute();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Path() { return GetToken(mcdocParser.Path, 0); }
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(Context, State);
		EnterRule(_localctx, 70, RULE_referenceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			Match(Path);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DispatcherTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResourceLocationContext resourceLocation() {
			return GetRuleContext<ResourceLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexBodyWithDynamicContext indexBodyWithDynamic() {
			return GetRuleContext<IndexBodyWithDynamicContext>(0);
		}
		public DispatcherTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dispatcherType; } }
	}

	[RuleVersion(0)]
	public DispatcherTypeContext dispatcherType() {
		DispatcherTypeContext _localctx = new DispatcherTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_dispatcherType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			resourceLocation();
			State = 341;
			indexBodyWithDynamic();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RoundBrackets() { return GetToken(mcdocParser.RoundBrackets, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftRoundBracket() { return GetToken(mcdocParser.LeftRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSentenceContext[] typeSentence() {
			return GetRuleContexts<TypeSentenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSentenceContext typeSentence(int i) {
			return GetRuleContext<TypeSentenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightRoundBracket() { return GetToken(mcdocParser.RightRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalORContext[] logicalOR() {
			return GetRuleContexts<LogicalORContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalORContext logicalOR(int i) {
			return GetRuleContext<LogicalORContext>(i);
		}
		public UnionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionType; } }
	}

	[RuleVersion(0)]
	public UnionTypeContext unionType() {
		UnionTypeContext _localctx = new UnionTypeContext(Context, State);
		EnterRule(_localctx, 74, RULE_unionType);
		int _la;
		try {
			int _alt;
			State = 359;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RoundBrackets:
				EnterOuterAlt(_localctx, 1);
				{
				State = 343;
				Match(RoundBrackets);
				}
				break;
			case LeftRoundBracket:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 344;
				Match(LeftRoundBracket);
				State = 345;
				typeSentence();
				State = 351;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 346;
						logicalOR();
						State = 347;
						typeSentence();
						}
						} 
					}
					State = 353;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
				}
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LogicalOR) {
					{
					State = 354;
					logicalOR();
					}
				}

				State = 357;
				Match(RightRoundBracket);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticIndexKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fallback() { return GetToken(mcdocParser.Fallback, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode None() { return GetToken(mcdocParser.None, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unknown() { return GetToken(mcdocParser.Unknown, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(mcdocParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(mcdocParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ResourceLocation() { return GetToken(mcdocParser.ResourceLocation, 0); }
		public StaticIndexKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticIndexKey; } }
	}

	[RuleVersion(0)]
	public StaticIndexKeyContext staticIndexKey() {
		StaticIndexKeyContext _localctx = new StaticIndexKeyContext(Context, State);
		EnterRule(_localctx, 76, RULE_staticIndexKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 13)) & ~0x3f) == 0 && ((1L << (_la - 13)) & 3096224743817223L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AccessorKeyContext[] accessorKey() {
			return GetRuleContexts<AccessorKeyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorKeyContext accessorKey(int i) {
			return GetRuleContext<AccessorKeyContext>(i);
		}
		public AccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor; } }
	}

	[RuleVersion(0)]
	public AccessorContext accessor() {
		AccessorContext _localctx = new AccessorContext(Context, State);
		EnterRule(_localctx, 78, RULE_accessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			accessorKey();
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6917529027641278464L) != 0)) {
				{
				{
				State = 364;
				accessorKey();
				}
				}
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Parent() { return GetToken(mcdocParser.Parent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Key() { return GetToken(mcdocParser.Key, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(mcdocParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(mcdocParser.String, 0); }
		public AccessorKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorKey; } }
	}

	[RuleVersion(0)]
	public AccessorKeyContext accessorKey() {
		AccessorKeyContext _localctx = new AccessorKeyContext(Context, State);
		EnterRule(_localctx, 80, RULE_accessorKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 6917529027641278464L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicIndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftSquareBracket() { return GetToken(mcdocParser.LeftSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessorContext accessor() {
			return GetRuleContext<AccessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightSquareBracket() { return GetToken(mcdocParser.RightSquareBracket, 0); }
		public DynamicIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicIndex; } }
	}

	[RuleVersion(0)]
	public DynamicIndexContext dynamicIndex() {
		DynamicIndexContext _localctx = new DynamicIndexContext(Context, State);
		EnterRule(_localctx, 82, RULE_dynamicIndex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			Match(LeftSquareBracket);
			State = 373;
			accessor();
			State = 374;
			Match(RightSquareBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexWithOutDynamicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StaticIndexKeyContext staticIndexKey() {
			return GetRuleContext<StaticIndexKeyContext>(0);
		}
		public IndexWithOutDynamicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexWithOutDynamic; } }
	}

	[RuleVersion(0)]
	public IndexWithOutDynamicContext indexWithOutDynamic() {
		IndexWithOutDynamicContext _localctx = new IndexWithOutDynamicContext(Context, State);
		EnterRule(_localctx, 84, RULE_indexWithOutDynamic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			staticIndexKey();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexWithDynamicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StaticIndexKeyContext staticIndexKey() {
			return GetRuleContext<StaticIndexKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DynamicIndexContext dynamicIndex() {
			return GetRuleContext<DynamicIndexContext>(0);
		}
		public IndexWithDynamicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexWithDynamic; } }
	}

	[RuleVersion(0)]
	public IndexWithDynamicContext indexWithDynamic() {
		IndexWithDynamicContext _localctx = new IndexWithDynamicContext(Context, State);
		EnterRule(_localctx, 86, RULE_indexWithDynamic);
		try {
			State = 380;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Fallback:
			case None:
			case Unknown:
			case Identifier:
			case String:
			case ResourceLocation:
				EnterOuterAlt(_localctx, 1);
				{
				State = 378;
				staticIndexKey();
				}
				break;
			case LeftSquareBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 379;
				dynamicIndex();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexBodyWithOutDynamicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftSquareBracket() { return GetToken(mcdocParser.LeftSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexWithOutDynamicContext[] indexWithOutDynamic() {
			return GetRuleContexts<IndexWithOutDynamicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexWithOutDynamicContext indexWithOutDynamic(int i) {
			return GetRuleContext<IndexWithOutDynamicContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightSquareBracket() { return GetToken(mcdocParser.RightSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(mcdocParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(mcdocParser.Comma, i);
		}
		public IndexBodyWithOutDynamicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexBodyWithOutDynamic; } }
	}

	[RuleVersion(0)]
	public IndexBodyWithOutDynamicContext indexBodyWithOutDynamic() {
		IndexBodyWithOutDynamicContext _localctx = new IndexBodyWithOutDynamicContext(Context, State);
		EnterRule(_localctx, 88, RULE_indexBodyWithOutDynamic);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			Match(LeftSquareBracket);
			State = 383;
			indexWithOutDynamic();
			State = 388;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 384;
					Match(Comma);
					State = 385;
					indexWithOutDynamic();
					}
					} 
				}
				State = 390;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 391;
				Match(Comma);
				}
			}

			State = 394;
			Match(RightSquareBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexBodyWithDynamicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftSquareBracket() { return GetToken(mcdocParser.LeftSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexWithDynamicContext[] indexWithDynamic() {
			return GetRuleContexts<IndexWithDynamicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexWithDynamicContext indexWithDynamic(int i) {
			return GetRuleContext<IndexWithDynamicContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightSquareBracket() { return GetToken(mcdocParser.RightSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(mcdocParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(mcdocParser.Comma, i);
		}
		public IndexBodyWithDynamicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexBodyWithDynamic; } }
	}

	[RuleVersion(0)]
	public IndexBodyWithDynamicContext indexBodyWithDynamic() {
		IndexBodyWithDynamicContext _localctx = new IndexBodyWithDynamicContext(Context, State);
		EnterRule(_localctx, 90, RULE_indexBodyWithDynamic);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(LeftSquareBracket);
			State = 397;
			indexWithDynamic();
			State = 402;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 398;
					Match(Comma);
					State = 399;
					indexWithDynamic();
					}
					} 
				}
				State = 404;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			State = 406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 405;
				Match(Comma);
				}
			}

			State = 408;
			Match(RightSquareBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexingOnATypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexBodyWithDynamicContext indexBodyWithDynamic() {
			return GetRuleContext<IndexBodyWithDynamicContext>(0);
		}
		public IndexingOnATypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexingOnAType; } }
	}

	[RuleVersion(0)]
	public IndexingOnATypeContext indexingOnAType() {
		IndexingOnATypeContext _localctx = new IndexingOnATypeContext(Context, State);
		EnterRule(_localctx, 92, RULE_indexingOnAType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			indexBodyWithDynamic();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleBrackets() { return GetToken(mcdocParser.AngleBrackets, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftAngleBracket() { return GetToken(mcdocParser.LeftAngleBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSentenceContext[] typeSentence() {
			return GetRuleContexts<TypeSentenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSentenceContext typeSentence(int i) {
			return GetRuleContext<TypeSentenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightAngleBracket() { return GetToken(mcdocParser.RightAngleBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(mcdocParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(mcdocParser.Comma, i);
		}
		public TypeArgBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgBlock; } }
	}

	[RuleVersion(0)]
	public TypeArgBlockContext typeArgBlock() {
		TypeArgBlockContext _localctx = new TypeArgBlockContext(Context, State);
		EnterRule(_localctx, 94, RULE_typeArgBlock);
		int _la;
		try {
			int _alt;
			State = 427;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AngleBrackets:
				EnterOuterAlt(_localctx, 1);
				{
				State = 412;
				Match(AngleBrackets);
				}
				break;
			case LeftAngleBracket:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 413;
				Match(LeftAngleBracket);
				State = 414;
				typeSentence();
				State = 419;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 415;
						Match(Comma);
						State = 416;
						typeSentence();
						}
						} 
					}
					State = 421;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				}
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 422;
					Match(Comma);
					}
				}

				State = 425;
				Match(RightAngleBracket);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnAttributedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordTypeContext keywordType() {
			return GetRuleContext<KeywordTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringTypeContext stringType() {
			return GetRuleContext<StringTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralTypeContext literalType() {
			return GetRuleContext<LiteralTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveArrayTypeContext primitiveArrayType() {
			return GetRuleContext<PrimitiveArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct() {
			return GetRuleContext<StructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DispatcherTypeContext dispatcherType() {
			return GetRuleContext<DispatcherTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionTypeContext unionType() {
			return GetRuleContext<UnionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexingOnATypeContext indexingOnAType() {
			return GetRuleContext<IndexingOnATypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(mcdocParser.Comma, 0); }
		public UnAttributedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unAttributedType; } }
	}

	[RuleVersion(0)]
	public UnAttributedTypeContext unAttributedType() {
		UnAttributedTypeContext _localctx = new UnAttributedTypeContext(Context, State);
		EnterRule(_localctx, 96, RULE_unAttributedType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 429;
				keywordType();
				}
				break;
			case 2:
				{
				State = 430;
				stringType();
				}
				break;
			case 3:
				{
				State = 431;
				literalType();
				}
				break;
			case 4:
				{
				State = 432;
				numericType();
				}
				break;
			case 5:
				{
				State = 433;
				primitiveArrayType();
				}
				break;
			case 6:
				{
				State = 434;
				listType();
				}
				break;
			case 7:
				{
				State = 435;
				tupleType();
				}
				break;
			case 8:
				{
				State = 436;
				enumType();
				}
				break;
			case 9:
				{
				State = 437;
				@struct();
				}
				break;
			case 10:
				{
				State = 438;
				referenceType();
				}
				break;
			case 11:
				{
				State = 439;
				dispatcherType();
				}
				break;
			case 12:
				{
				State = 440;
				unionType();
				}
				break;
			case 13:
				{
				State = 441;
				indexingOnAType();
				}
				break;
			}
			State = 445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 444;
				Match(Comma);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnAttributedTypeContext unAttributedType() {
			return GetRuleContext<UnAttributedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexBodyWithDynamicContext[] indexBodyWithDynamic() {
			return GetRuleContexts<IndexBodyWithDynamicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexBodyWithDynamicContext indexBodyWithDynamic(int i) {
			return GetRuleContext<IndexBodyWithDynamicContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgBlockContext[] typeArgBlock() {
			return GetRuleContexts<TypeArgBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgBlockContext typeArgBlock(int i) {
			return GetRuleContext<TypeArgBlockContext>(i);
		}
		public TypeSentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSentence; } }
	}

	[RuleVersion(0)]
	public TypeSentenceContext typeSentence() {
		TypeSentenceContext _localctx = new TypeSentenceContext(Context, State);
		EnterRule(_localctx, 98, RULE_typeSentence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Sharp) {
				{
				{
				State = 447;
				attribute();
				}
				}
				State = 452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 453;
			unAttributedType();
			State = 458;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6450839552L) != 0)) {
				{
				State = 456;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LeftSquareBracket:
					{
					State = 454;
					indexBodyWithDynamic();
					}
					break;
				case AngleBrackets:
				case LeftAngleBracket:
					{
					State = 455;
					typeArgBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 460;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommentaryContext[] commentary() {
			return GetRuleContexts<CommentaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentaryContext commentary(int i) {
			return GetRuleContext<CommentaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public AttributeSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeSet; } }
	}

	[RuleVersion(0)]
	public AttributeSetContext attributeSet() {
		AttributeSetContext _localctx = new AttributeSetContext(Context, State);
		EnterRule(_localctx, 100, RULE_attributeSet);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 461;
					commentary();
					}
					} 
				}
				State = 466;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			State = 470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Sharp) {
				{
				{
				State = 467;
				attribute();
				}
				}
				State = 472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 476;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 473;
					commentary();
					}
					} 
				}
				State = 478;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			State = 482;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Identifier) {
				{
				{
				State = 479;
				identifier();
				}
				}
				State = 484;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Commentary) {
				{
				{
				State = 485;
				commentary();
				}
				}
				State = 490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtContext at() {
			return GetRuleContext<AtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PositiveInteger() { return GetToken(mcdocParser.PositiveInteger, 0); }
		public ArrayLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLength; } }
	}

	[RuleVersion(0)]
	public ArrayLengthContext arrayLength() {
		ArrayLengthContext _localctx = new ArrayLengthContext(Context, State);
		EnterRule(_localctx, 102, RULE_arrayLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			at();
			State = 492;
			Match(PositiveInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(mcdocParser.String, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 104, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionalValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(mcdocParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(mcdocParser.Comma, i);
		}
		public PositionalValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionalValues; } }
	}

	[RuleVersion(0)]
	public PositionalValuesContext positionalValues() {
		PositionalValuesContext _localctx = new PositionalValuesContext(Context, State);
		EnterRule(_localctx, 106, RULE_positionalValues);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			value();
			State = 501;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 497;
					Match(Comma);
					State = 498;
					value();
					}
					} 
				}
				State = 503;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(mcdocParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TreeValueContext treeValue() {
			return GetRuleContext<TreeValueContext>(0);
		}
		public NamedValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedValue; } }
	}

	[RuleVersion(0)]
	public NamedValueContext namedValue() {
		NamedValueContext _localctx = new NamedValueContext(Context, State);
		EnterRule(_localctx, 108, RULE_namedValue);
		try {
			State = 517;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 506;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Identifier:
					{
					State = 504;
					identifier();
					}
					break;
				case String:
					{
					State = 505;
					@string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 508;
				Match(Equal);
				State = 509;
				value();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 513;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Identifier:
					{
					State = 511;
					identifier();
					}
					break;
				case String:
					{
					State = 512;
					@string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 515;
				treeValue();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedValueContext[] namedValue() {
			return GetRuleContexts<NamedValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedValueContext namedValue(int i) {
			return GetRuleContext<NamedValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(mcdocParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(mcdocParser.Comma, i);
		}
		public NamedValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedValues; } }
	}

	[RuleVersion(0)]
	public NamedValuesContext namedValues() {
		NamedValuesContext _localctx = new NamedValuesContext(Context, State);
		EnterRule(_localctx, 110, RULE_namedValues);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			namedValue();
			State = 524;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 520;
					Match(Comma);
					State = 521;
					namedValue();
					}
					} 
				}
				State = 526;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TreeBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PositionalValuesContext positionalValues() {
			return GetRuleContext<PositionalValuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(mcdocParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(mcdocParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedValuesContext namedValues() {
			return GetRuleContext<NamedValuesContext>(0);
		}
		public TreeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_treeBody; } }
	}

	[RuleVersion(0)]
	public TreeBodyContext treeBody() {
		TreeBodyContext _localctx = new TreeBodyContext(Context, State);
		EnterRule(_localctx, 112, RULE_treeBody);
		int _la;
		try {
			State = 541;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 527;
				positionalValues();
				State = 529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 528;
					Match(Comma);
					}
				}

				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 531;
				namedValues();
				State = 533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 532;
					Match(Comma);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 535;
				positionalValues();
				State = 536;
				Match(Comma);
				State = 537;
				namedValues();
				State = 539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 538;
					Match(Comma);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TreeValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftRoundBracket() { return GetToken(mcdocParser.LeftRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightRoundBracket() { return GetToken(mcdocParser.RightRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TreeBodyContext treeBody() {
			return GetRuleContext<TreeBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftSquareBracket() { return GetToken(mcdocParser.LeftSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightSquareBracket() { return GetToken(mcdocParser.RightSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftCurlyBracket() { return GetToken(mcdocParser.LeftCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightCurlyBracket() { return GetToken(mcdocParser.RightCurlyBracket, 0); }
		public TreeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_treeValue; } }
	}

	[RuleVersion(0)]
	public TreeValueContext treeValue() {
		TreeValueContext _localctx = new TreeValueContext(Context, State);
		EnterRule(_localctx, 114, RULE_treeValue);
		int _la;
		try {
			State = 558;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftRoundBracket:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 543;
				Match(LeftRoundBracket);
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & 774724680439119877L) != 0)) {
					{
					State = 544;
					treeBody();
					}
				}

				State = 547;
				Match(RightRoundBracket);
				}
				}
				break;
			case LeftSquareBracket:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 548;
				Match(LeftSquareBracket);
				State = 550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & 774724680439119877L) != 0)) {
					{
					State = 549;
					treeBody();
					}
				}

				State = 552;
				Match(RightSquareBracket);
				}
				}
				break;
			case LeftCurlyBracket:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 553;
				Match(LeftCurlyBracket);
				State = 555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & 774724680439119877L) != 0)) {
					{
					State = 554;
					treeBody();
					}
				}

				State = 557;
				Match(RightCurlyBracket);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSentenceContext typeSentence() {
			return GetRuleContext<TypeSentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TreeValueContext treeValue() {
			return GetRuleContext<TreeValueContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 116, RULE_value);
		try {
			State = 562;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 560;
				typeSentence();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 561;
				treeValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sharp() { return GetToken(mcdocParser.Sharp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftSquareBracket() { return GetToken(mcdocParser.LeftSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightSquareBracket() { return GetToken(mcdocParser.RightSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(mcdocParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TreeValueContext treeValue() {
			return GetRuleContext<TreeValueContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 118, RULE_attribute);
		try {
			State = 582;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 564;
				Match(Sharp);
				State = 565;
				Match(LeftSquareBracket);
				State = 566;
				identifier();
				State = 567;
				Match(RightSquareBracket);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 569;
				Match(Sharp);
				State = 570;
				Match(LeftSquareBracket);
				State = 571;
				identifier();
				State = 572;
				Match(Equal);
				State = 573;
				value();
				State = 574;
				Match(RightSquareBracket);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 576;
				Match(Sharp);
				State = 577;
				Match(LeftSquareBracket);
				State = 578;
				identifier();
				State = 579;
				treeValue();
				State = 580;
				Match(RightSquareBracket);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DispatchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DispatchContext dispatch() {
			return GetRuleContext<DispatchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceLocationContext resourceLocation() {
			return GetRuleContext<ResourceLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexBodyWithOutDynamicContext indexBodyWithOutDynamic() {
			return GetRuleContext<IndexBodyWithOutDynamicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode To() { return GetToken(mcdocParser.To, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSentenceContext typeSentence() {
			return GetRuleContext<TypeSentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrelimContext prelim() {
			return GetRuleContext<PrelimContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamBlockContext typeParamBlock() {
			return GetRuleContext<TypeParamBlockContext>(0);
		}
		public DispatchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dispatchStatement; } }
	}

	[RuleVersion(0)]
	public DispatchStatementContext dispatchStatement() {
		DispatchStatementContext _localctx = new DispatchStatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_dispatchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DocCommentary || _la==Commentary) {
				{
				State = 584;
				prelim();
				}
			}

			State = 590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Sharp) {
				{
				{
				State = 587;
				attribute();
				}
				}
				State = 592;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 593;
			dispatch();
			State = 594;
			resourceLocation();
			State = 595;
			indexBodyWithOutDynamic();
			State = 597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AngleBrackets || _la==LeftAngleBracket) {
				{
				State = 596;
				typeParamBlock();
				}
			}

			State = 599;
			Match(To);
			State = 600;
			typeSentence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructInjectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructKeyTypeContext structKeyType() {
			return GetRuleContext<StructKeyTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructBlockContext structBlock() {
			return GetRuleContext<StructBlockContext>(0);
		}
		public StructInjectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structInjection; } }
	}

	[RuleVersion(0)]
	public StructInjectionContext structInjection() {
		StructInjectionContext _localctx = new StructInjectionContext(Context, State);
		EnterRule(_localctx, 122, RULE_structInjection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602;
			structKeyType();
			State = 603;
			path();
			State = 604;
			structBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumInjectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(mcdocParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftRoundBracket() { return GetToken(mcdocParser.LeftRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightRoundBracket() { return GetToken(mcdocParser.RightRoundBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumBlockContext enumBlock() {
			return GetRuleContext<EnumBlockContext>(0);
		}
		public EnumInjectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumInjection; } }
	}

	[RuleVersion(0)]
	public EnumInjectionContext enumInjection() {
		EnumInjectionContext _localctx = new EnumInjectionContext(Context, State);
		EnterRule(_localctx, 124, RULE_enumInjection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606;
			Match(Enum);
			State = 607;
			Match(LeftRoundBracket);
			State = 608;
			enumType();
			State = 609;
			Match(RightRoundBracket);
			State = 610;
			path();
			State = 611;
			enumBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InjectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InjectContext inject() {
			return GetRuleContext<InjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumInjectionContext enumInjection() {
			return GetRuleContext<EnumInjectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructInjectionContext structInjection() {
			return GetRuleContext<StructInjectionContext>(0);
		}
		public InjectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_injection; } }
	}

	[RuleVersion(0)]
	public InjectionContext injection() {
		InjectionContext _localctx = new InjectionContext(Context, State);
		EnterRule(_localctx, 126, RULE_injection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			inject();
			State = 616;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Enum:
				{
				State = 614;
				enumInjection();
				}
				break;
			case StructKeyType:
				{
				State = 615;
				structInjection();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UseContext use() {
			return GetRuleContext<UseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsContext @as() {
			return GetRuleContext<AsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useStatement; } }
	}

	[RuleVersion(0)]
	public UseStatementContext useStatement() {
		UseStatementContext _localctx = new UseStatementContext(Context, State);
		EnterRule(_localctx, 128, RULE_useStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618;
			use();
			State = 619;
			path();
			State = 623;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 620;
				@as();
				State = 621;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(mcdocParser.Identifier, 0); }
		public TypeParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParam; } }
	}

	[RuleVersion(0)]
	public TypeParamContext typeParam() {
		TypeParamContext _localctx = new TypeParamContext(Context, State);
		EnterRule(_localctx, 130, RULE_typeParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParamBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AngleBrackets() { return GetToken(mcdocParser.AngleBrackets, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftAngleBracket() { return GetToken(mcdocParser.LeftAngleBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamContext[] typeParam() {
			return GetRuleContexts<TypeParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamContext typeParam(int i) {
			return GetRuleContext<TypeParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightAngleBracket() { return GetToken(mcdocParser.RightAngleBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(mcdocParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(mcdocParser.Comma, i);
		}
		public TypeParamBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParamBlock; } }
	}

	[RuleVersion(0)]
	public TypeParamBlockContext typeParamBlock() {
		TypeParamBlockContext _localctx = new TypeParamBlockContext(Context, State);
		EnterRule(_localctx, 132, RULE_typeParamBlock);
		int _la;
		try {
			int _alt;
			State = 642;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AngleBrackets:
				EnterOuterAlt(_localctx, 1);
				{
				State = 627;
				Match(AngleBrackets);
				}
				break;
			case LeftAngleBracket:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 628;
				Match(LeftAngleBracket);
				State = 629;
				typeParam();
				State = 634;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 630;
						Match(Comma);
						State = 631;
						typeParam();
						}
						} 
					}
					State = 636;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
				}
				State = 638;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 637;
					Match(Comma);
					}
				}

				State = 640;
				Match(RightAngleBracket);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeKeyContext typeKey() {
			return GetRuleContext<TypeKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(mcdocParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSentenceContext typeSentence() {
			return GetRuleContext<TypeSentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrelimContext[] prelim() {
			return GetRuleContexts<PrelimContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrelimContext prelim(int i) {
			return GetRuleContext<PrelimContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamBlockContext typeParamBlock() {
			return GetRuleContext<TypeParamBlockContext>(0);
		}
		public TypeAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAlias; } }
	}

	[RuleVersion(0)]
	public TypeAliasContext typeAlias() {
		TypeAliasContext _localctx = new TypeAliasContext(Context, State);
		EnterRule(_localctx, 134, RULE_typeAlias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DocCommentary || _la==Commentary) {
				{
				{
				State = 644;
				prelim();
				}
				}
				State = 649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 650;
			typeKey();
			State = 651;
			identifier();
			State = 653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AngleBrackets || _la==LeftAngleBracket) {
				{
				State = 652;
				typeParamBlock();
				}
			}

			State = 655;
			Match(Equal);
			State = 656;
			typeSentence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(mcdocParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(mcdocParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftSquareBracket() { return GetToken(mcdocParser.LeftSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSentenceContext typeSentence() {
			return GetRuleContext<TypeSentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightSquareBracket() { return GetToken(mcdocParser.RightSquareBracket, 0); }
		public StructKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structKey; } }
	}

	[RuleVersion(0)]
	public StructKeyContext structKey() {
		StructKeyContext _localctx = new StructKeyContext(Context, State);
		EnterRule(_localctx, 136, RULE_structKey);
		try {
			State = 664;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case String:
				EnterOuterAlt(_localctx, 1);
				{
				State = 658;
				Match(String);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 659;
				Match(Identifier);
				}
				break;
			case LeftSquareBracket:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 660;
				Match(LeftSquareBracket);
				State = 661;
				typeSentence();
				State = 662;
				Match(RightSquareBracket);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructKeyContext structKey() {
			return GetRuleContext<StructKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ColonMark() { return GetToken(mcdocParser.ColonMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSentenceContext typeSentence() {
			return GetRuleContext<TypeSentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrelimContext[] prelim() {
			return GetRuleContexts<PrelimContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrelimContext prelim(int i) {
			return GetRuleContext<PrelimContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuestionMarkContext questionMark() {
			return GetRuleContext<QuestionMarkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TripleDot() { return GetToken(mcdocParser.TripleDot, 0); }
		public StructFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structField; } }
	}

	[RuleVersion(0)]
	public StructFieldContext structField() {
		StructFieldContext _localctx = new StructFieldContext(Context, State);
		EnterRule(_localctx, 138, RULE_structField);
		int _la;
		try {
			int _alt;
			State = 695;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DocCommentary || _la==Commentary) {
					{
					{
					State = 666;
					prelim();
					}
					}
					State = 671;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Sharp) {
					{
					{
					State = 672;
					attribute();
					}
					}
					State = 677;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 678;
				structKey();
				State = 680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QuestionMark) {
					{
					State = 679;
					questionMark();
					}
				}

				State = 682;
				Match(ColonMark);
				State = 683;
				typeSentence();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 688;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 685;
						attribute();
						}
						} 
					}
					State = 690;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
				}
				State = 692;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TripleDot) {
					{
					State = 691;
					Match(TripleDot);
					}
				}

				State = 694;
				typeSentence();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CurlyBrackets() { return GetToken(mcdocParser.CurlyBrackets, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftCurlyBracket() { return GetToken(mcdocParser.LeftCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldContext[] structField() {
			return GetRuleContexts<StructFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructFieldContext structField(int i) {
			return GetRuleContext<StructFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightCurlyBracket() { return GetToken(mcdocParser.RightCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(mcdocParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(mcdocParser.Comma, i);
		}
		public StructBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structBlock; } }
	}

	[RuleVersion(0)]
	public StructBlockContext structBlock() {
		StructBlockContext _localctx = new StructBlockContext(Context, State);
		EnterRule(_localctx, 140, RULE_structBlock);
		int _la;
		try {
			int _alt;
			State = 712;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CurlyBrackets:
				EnterOuterAlt(_localctx, 1);
				{
				State = 697;
				Match(CurlyBrackets);
				}
				break;
			case LeftCurlyBracket:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 698;
				Match(LeftCurlyBracket);
				State = 699;
				structField();
				State = 704;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 700;
						Match(Comma);
						State = 701;
						structField();
						}
						} 
					}
					State = 706;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
				}
				State = 708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 707;
					Match(Comma);
					}
				}

				State = 710;
				Match(RightCurlyBracket);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructKeyTypeContext structKeyType() {
			return GetRuleContext<StructKeyTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructBlockContext structBlock() {
			return GetRuleContext<StructBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrelimContext[] prelim() {
			return GetRuleContexts<PrelimContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrelimContext prelim(int i) {
			return GetRuleContext<PrelimContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 142, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DocCommentary || _la==Commentary) {
				{
				{
				State = 714;
				prelim();
				}
				}
				State = 719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 720;
			structKeyType();
			State = 722;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 721;
				identifier();
				}
			}

			State = 724;
			structBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructContext[] @struct() {
			return GetRuleContexts<StructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct(int i) {
			return GetRuleContext<StructContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext[] enumType() {
			return GetRuleContexts<EnumTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumTypeContext enumType(int i) {
			return GetRuleContext<EnumTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAliasContext[] typeAlias() {
			return GetRuleContexts<TypeAliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAliasContext typeAlias(int i) {
			return GetRuleContext<TypeAliasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseStatementContext[] useStatement() {
			return GetRuleContexts<UseStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseStatementContext useStatement(int i) {
			return GetRuleContext<UseStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InjectionContext[] injection() {
			return GetRuleContexts<InjectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InjectionContext injection(int i) {
			return GetRuleContext<InjectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DispatchStatementContext[] dispatchStatement() {
			return GetRuleContexts<DispatchStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DispatchStatementContext dispatchStatement(int i) {
			return GetRuleContext<DispatchStatementContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 144, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3377699722631104L) != 0)) {
				{
				State = 732;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
				case 1:
					{
					State = 726;
					@struct();
					}
					break;
				case 2:
					{
					State = 727;
					enumType();
					}
					break;
				case 3:
					{
					State = 728;
					typeAlias();
					}
					break;
				case 4:
					{
					State = 729;
					useStatement();
					}
					break;
				case 5:
					{
					State = 730;
					injection();
					}
					break;
				case 6:
					{
					State = 731;
					dispatchStatement();
					}
					break;
				}
				}
				State = 736;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,66,738,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,
		6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
		1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
		1,21,1,21,1,22,1,22,3,22,193,8,22,1,22,1,22,3,22,197,8,22,3,22,199,8,22,
		1,23,1,23,1,23,1,23,3,23,205,8,23,1,24,1,24,1,25,1,25,1,25,1,25,3,25,213,
		8,25,3,25,215,8,25,1,26,1,26,1,26,5,26,220,8,26,10,26,12,26,223,9,26,1,
		26,1,26,3,26,227,8,26,3,26,229,8,26,1,26,1,26,5,26,233,8,26,10,26,12,26,
		236,9,26,1,26,1,26,5,26,240,8,26,10,26,12,26,243,9,26,1,26,1,26,3,26,247,
		8,26,3,26,249,8,26,1,27,1,27,1,27,1,27,1,27,1,27,3,27,257,8,27,3,27,259,
		8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,4,28,270,8,28,11,28,
		12,28,271,1,28,3,28,275,8,28,1,28,1,28,3,28,279,8,28,1,29,1,29,1,30,1,
		30,3,30,285,8,30,1,31,5,31,288,8,31,10,31,12,31,291,9,31,1,31,5,31,294,
		8,31,10,31,12,31,297,9,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
		5,32,308,8,32,10,32,12,32,311,9,32,1,32,3,32,314,8,32,1,32,1,32,3,32,318,
		8,32,1,33,3,33,321,8,33,1,33,1,33,1,33,1,33,1,33,3,33,328,8,33,1,33,1,
		33,1,34,1,34,3,34,334,8,34,1,34,3,34,337,8,34,1,35,1,35,1,36,1,36,1,36,
		1,37,1,37,1,37,1,37,1,37,1,37,5,37,350,8,37,10,37,12,37,353,9,37,1,37,
		3,37,356,8,37,1,37,1,37,3,37,360,8,37,1,38,1,38,1,39,1,39,5,39,366,8,39,
		10,39,12,39,369,9,39,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,43,1,43,
		3,43,381,8,43,1,44,1,44,1,44,1,44,5,44,387,8,44,10,44,12,44,390,9,44,1,
		44,3,44,393,8,44,1,44,1,44,1,45,1,45,1,45,1,45,5,45,401,8,45,10,45,12,
		45,404,9,45,1,45,3,45,407,8,45,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,47,
		1,47,5,47,418,8,47,10,47,12,47,421,9,47,1,47,3,47,424,8,47,1,47,1,47,3,
		47,428,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
		1,48,3,48,443,8,48,1,48,3,48,446,8,48,1,49,5,49,449,8,49,10,49,12,49,452,
		9,49,1,49,1,49,1,49,5,49,457,8,49,10,49,12,49,460,9,49,1,50,5,50,463,8,
		50,10,50,12,50,466,9,50,1,50,5,50,469,8,50,10,50,12,50,472,9,50,1,50,5,
		50,475,8,50,10,50,12,50,478,9,50,1,50,5,50,481,8,50,10,50,12,50,484,9,
		50,1,50,5,50,487,8,50,10,50,12,50,490,9,50,1,51,1,51,1,51,1,52,1,52,1,
		53,1,53,1,53,5,53,500,8,53,10,53,12,53,503,9,53,1,54,1,54,3,54,507,8,54,
		1,54,1,54,1,54,1,54,1,54,3,54,514,8,54,1,54,1,54,3,54,518,8,54,1,55,1,
		55,1,55,5,55,523,8,55,10,55,12,55,526,9,55,1,56,1,56,3,56,530,8,56,1,56,
		1,56,3,56,534,8,56,1,56,1,56,1,56,1,56,3,56,540,8,56,3,56,542,8,56,1,57,
		1,57,3,57,546,8,57,1,57,1,57,1,57,3,57,551,8,57,1,57,1,57,1,57,3,57,556,
		8,57,1,57,3,57,559,8,57,1,58,1,58,3,58,563,8,58,1,59,1,59,1,59,1,59,1,
		59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,
		59,583,8,59,1,60,3,60,586,8,60,1,60,5,60,589,8,60,10,60,12,60,592,9,60,
		1,60,1,60,1,60,1,60,3,60,598,8,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,
		62,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,3,63,617,8,63,1,64,1,64,
		1,64,1,64,1,64,3,64,624,8,64,1,65,1,65,1,66,1,66,1,66,1,66,1,66,5,66,633,
		8,66,10,66,12,66,636,9,66,1,66,3,66,639,8,66,1,66,1,66,3,66,643,8,66,1,
		67,5,67,646,8,67,10,67,12,67,649,9,67,1,67,1,67,1,67,3,67,654,8,67,1,67,
		1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,3,68,665,8,68,1,69,5,69,668,8,
		69,10,69,12,69,671,9,69,1,69,5,69,674,8,69,10,69,12,69,677,9,69,1,69,1,
		69,3,69,681,8,69,1,69,1,69,1,69,1,69,5,69,687,8,69,10,69,12,69,690,9,69,
		1,69,3,69,693,8,69,1,69,3,69,696,8,69,1,70,1,70,1,70,1,70,1,70,5,70,703,
		8,70,10,70,12,70,706,9,70,1,70,3,70,709,8,70,1,70,1,70,3,70,713,8,70,1,
		71,5,71,716,8,71,10,71,12,71,719,9,71,1,71,1,71,3,71,723,8,71,1,71,1,71,
		1,72,1,72,1,72,1,72,1,72,1,72,5,72,733,8,72,10,72,12,72,736,9,72,1,72,
		0,0,73,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
		46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
		94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
		132,134,136,138,140,142,144,0,7,1,0,40,47,1,0,48,49,3,0,49,49,53,53,61,
		62,1,0,40,42,2,0,40,43,45,47,3,0,13,15,61,62,64,64,2,0,16,17,61,62,772,
		0,146,1,0,0,0,2,148,1,0,0,0,4,150,1,0,0,0,6,152,1,0,0,0,8,154,1,0,0,0,
		10,156,1,0,0,0,12,158,1,0,0,0,14,160,1,0,0,0,16,162,1,0,0,0,18,164,1,0,
		0,0,20,166,1,0,0,0,22,168,1,0,0,0,24,170,1,0,0,0,26,172,1,0,0,0,28,174,
		1,0,0,0,30,176,1,0,0,0,32,178,1,0,0,0,34,180,1,0,0,0,36,182,1,0,0,0,38,
		184,1,0,0,0,40,186,1,0,0,0,42,188,1,0,0,0,44,198,1,0,0,0,46,200,1,0,0,
		0,48,206,1,0,0,0,50,208,1,0,0,0,52,216,1,0,0,0,54,250,1,0,0,0,56,278,1,
		0,0,0,58,280,1,0,0,0,60,284,1,0,0,0,62,289,1,0,0,0,64,317,1,0,0,0,66,320,
		1,0,0,0,68,333,1,0,0,0,70,338,1,0,0,0,72,340,1,0,0,0,74,359,1,0,0,0,76,
		361,1,0,0,0,78,363,1,0,0,0,80,370,1,0,0,0,82,372,1,0,0,0,84,376,1,0,0,
		0,86,380,1,0,0,0,88,382,1,0,0,0,90,396,1,0,0,0,92,410,1,0,0,0,94,427,1,
		0,0,0,96,442,1,0,0,0,98,450,1,0,0,0,100,464,1,0,0,0,102,491,1,0,0,0,104,
		494,1,0,0,0,106,496,1,0,0,0,108,517,1,0,0,0,110,519,1,0,0,0,112,541,1,
		0,0,0,114,558,1,0,0,0,116,562,1,0,0,0,118,582,1,0,0,0,120,585,1,0,0,0,
		122,602,1,0,0,0,124,606,1,0,0,0,126,613,1,0,0,0,128,618,1,0,0,0,130,625,
		1,0,0,0,132,642,1,0,0,0,134,647,1,0,0,0,136,664,1,0,0,0,138,695,1,0,0,
		0,140,712,1,0,0,0,142,717,1,0,0,0,144,734,1,0,0,0,146,147,5,34,0,0,147,
		1,1,0,0,0,148,149,5,66,0,0,149,3,1,0,0,0,150,151,5,64,0,0,151,5,1,0,0,
		0,152,153,5,3,0,0,153,7,1,0,0,0,154,155,5,2,0,0,155,9,1,0,0,0,156,157,
		5,5,0,0,157,11,1,0,0,0,158,159,7,0,0,0,159,13,1,0,0,0,160,161,7,1,0,0,
		161,15,1,0,0,0,162,163,5,4,0,0,163,17,1,0,0,0,164,165,5,6,0,0,165,19,1,
		0,0,0,166,167,5,7,0,0,167,21,1,0,0,0,168,169,5,8,0,0,169,23,1,0,0,0,170,
		171,5,9,0,0,171,25,1,0,0,0,172,173,5,10,0,0,173,27,1,0,0,0,174,175,5,12,
		0,0,175,29,1,0,0,0,176,177,5,39,0,0,177,31,1,0,0,0,178,179,5,54,0,0,179,
		33,1,0,0,0,180,181,5,55,0,0,181,35,1,0,0,0,182,183,5,59,0,0,183,37,1,0,
		0,0,184,185,5,61,0,0,185,39,1,0,0,0,186,187,5,51,0,0,187,41,1,0,0,0,188,
		189,5,50,0,0,189,43,1,0,0,0,190,192,3,32,16,0,191,193,5,57,0,0,192,191,
		1,0,0,0,192,193,1,0,0,0,193,199,1,0,0,0,194,196,3,34,17,0,195,197,5,58,
		0,0,196,195,1,0,0,0,196,197,1,0,0,0,197,199,1,0,0,0,198,190,1,0,0,0,198,
		194,1,0,0,0,199,45,1,0,0,0,200,204,5,43,0,0,201,202,3,6,3,0,202,203,5,
		59,0,0,203,205,1,0,0,0,204,201,1,0,0,0,204,205,1,0,0,0,205,47,1,0,0,0,
		206,207,7,2,0,0,207,49,1,0,0,0,208,214,3,12,6,0,209,212,3,6,3,0,210,213,
		3,36,18,0,211,213,3,32,16,0,212,210,1,0,0,0,212,211,1,0,0,0,213,215,1,
		0,0,0,214,209,1,0,0,0,214,215,1,0,0,0,215,51,1,0,0,0,216,228,7,3,0,0,217,
		221,3,6,3,0,218,220,5,1,0,0,219,218,1,0,0,0,220,223,1,0,0,0,221,219,1,
		0,0,0,221,222,1,0,0,0,222,226,1,0,0,0,223,221,1,0,0,0,224,227,3,36,18,
		0,225,227,3,32,16,0,226,224,1,0,0,0,226,225,1,0,0,0,227,229,1,0,0,0,228,
		217,1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,234,5,22,0,0,231,233,5,
		1,0,0,232,231,1,0,0,0,233,236,1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,
		235,248,1,0,0,0,236,234,1,0,0,0,237,241,3,6,3,0,238,240,5,1,0,0,239,238,
		1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,246,1,0,0,
		0,243,241,1,0,0,0,244,247,3,36,18,0,245,247,3,32,16,0,246,244,1,0,0,0,
		246,245,1,0,0,0,247,249,1,0,0,0,248,237,1,0,0,0,248,249,1,0,0,0,249,53,
		1,0,0,0,250,251,5,23,0,0,251,252,3,98,49,0,252,258,5,24,0,0,253,256,3,
		6,3,0,254,257,3,36,18,0,255,257,3,32,16,0,256,254,1,0,0,0,256,255,1,0,
		0,0,257,259,1,0,0,0,258,253,1,0,0,0,258,259,1,0,0,0,259,55,1,0,0,0,260,
		261,5,23,0,0,261,262,3,98,49,0,262,263,5,35,0,0,263,264,5,24,0,0,264,279,
		1,0,0,0,265,266,5,23,0,0,266,269,3,98,49,0,267,268,5,35,0,0,268,270,3,
		98,49,0,269,267,1,0,0,0,270,271,1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,
		0,272,274,1,0,0,0,273,275,5,35,0,0,274,273,1,0,0,0,274,275,1,0,0,0,275,
		276,1,0,0,0,276,277,5,24,0,0,277,279,1,0,0,0,278,260,1,0,0,0,278,265,1,
		0,0,0,279,57,1,0,0,0,280,281,7,4,0,0,281,59,1,0,0,0,282,285,3,44,22,0,
		283,285,3,104,52,0,284,282,1,0,0,0,284,283,1,0,0,0,285,61,1,0,0,0,286,
		288,3,68,34,0,287,286,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,
		1,0,0,0,290,295,1,0,0,0,291,289,1,0,0,0,292,294,3,118,59,0,293,292,1,0,
		0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,
		295,1,0,0,0,298,299,3,38,19,0,299,300,5,20,0,0,300,301,3,60,30,0,301,63,
		1,0,0,0,302,318,5,28,0,0,303,304,5,29,0,0,304,309,3,62,31,0,305,306,5,
		35,0,0,306,308,3,62,31,0,307,305,1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,
		0,309,310,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,312,314,5,35,0,0,313,
		312,1,0,0,0,313,314,1,0,0,0,314,315,1,0,0,0,315,316,5,30,0,0,316,318,1,
		0,0,0,317,302,1,0,0,0,317,303,1,0,0,0,318,65,1,0,0,0,319,321,3,68,34,0,
		320,319,1,0,0,0,320,321,1,0,0,0,321,322,1,0,0,0,322,323,3,24,12,0,323,
		324,5,26,0,0,324,325,3,58,29,0,325,327,5,27,0,0,326,328,3,38,19,0,327,
		326,1,0,0,0,327,328,1,0,0,0,328,329,1,0,0,0,329,330,3,64,32,0,330,67,1,
		0,0,0,331,334,3,42,21,0,332,334,3,40,20,0,333,331,1,0,0,0,333,332,1,0,
		0,0,334,336,1,0,0,0,335,337,3,118,59,0,336,335,1,0,0,0,336,337,1,0,0,0,
		337,69,1,0,0,0,338,339,5,66,0,0,339,71,1,0,0,0,340,341,3,4,2,0,341,342,
		3,90,45,0,342,73,1,0,0,0,343,360,5,25,0,0,344,345,5,26,0,0,345,351,3,98,
		49,0,346,347,3,0,0,0,347,348,3,98,49,0,348,350,1,0,0,0,349,346,1,0,0,0,
		350,353,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,355,1,0,0,0,353,351,
		1,0,0,0,354,356,3,0,0,0,355,354,1,0,0,0,355,356,1,0,0,0,356,357,1,0,0,
		0,357,358,5,27,0,0,358,360,1,0,0,0,359,343,1,0,0,0,359,344,1,0,0,0,360,
		75,1,0,0,0,361,362,7,5,0,0,362,77,1,0,0,0,363,367,3,80,40,0,364,366,3,
		80,40,0,365,364,1,0,0,0,366,369,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,
		0,368,79,1,0,0,0,369,367,1,0,0,0,370,371,7,6,0,0,371,81,1,0,0,0,372,373,
		5,23,0,0,373,374,3,78,39,0,374,375,5,24,0,0,375,83,1,0,0,0,376,377,3,76,
		38,0,377,85,1,0,0,0,378,381,3,76,38,0,379,381,3,82,41,0,380,378,1,0,0,
		0,380,379,1,0,0,0,381,87,1,0,0,0,382,383,5,23,0,0,383,388,3,84,42,0,384,
		385,5,35,0,0,385,387,3,84,42,0,386,384,1,0,0,0,387,390,1,0,0,0,388,386,
		1,0,0,0,388,389,1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,391,393,5,35,0,
		0,392,391,1,0,0,0,392,393,1,0,0,0,393,394,1,0,0,0,394,395,5,24,0,0,395,
		89,1,0,0,0,396,397,5,23,0,0,397,402,3,86,43,0,398,399,5,35,0,0,399,401,
		3,86,43,0,400,398,1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,1,0,
		0,0,403,406,1,0,0,0,404,402,1,0,0,0,405,407,5,35,0,0,406,405,1,0,0,0,406,
		407,1,0,0,0,407,408,1,0,0,0,408,409,5,24,0,0,409,91,1,0,0,0,410,411,3,
		90,45,0,411,93,1,0,0,0,412,428,5,31,0,0,413,414,5,32,0,0,414,419,3,98,
		49,0,415,416,5,35,0,0,416,418,3,98,49,0,417,415,1,0,0,0,418,421,1,0,0,
		0,419,417,1,0,0,0,419,420,1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,422,
		424,5,35,0,0,423,422,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,426,5,
		33,0,0,426,428,1,0,0,0,427,412,1,0,0,0,427,413,1,0,0,0,428,95,1,0,0,0,
		429,443,3,14,7,0,430,443,3,46,23,0,431,443,3,48,24,0,432,443,3,50,25,0,
		433,443,3,52,26,0,434,443,3,54,27,0,435,443,3,56,28,0,436,443,3,66,33,
		0,437,443,3,142,71,0,438,443,3,70,35,0,439,443,3,72,36,0,440,443,3,74,
		37,0,441,443,3,92,46,0,442,429,1,0,0,0,442,430,1,0,0,0,442,431,1,0,0,0,
		442,432,1,0,0,0,442,433,1,0,0,0,442,434,1,0,0,0,442,435,1,0,0,0,442,436,
		1,0,0,0,442,437,1,0,0,0,442,438,1,0,0,0,442,439,1,0,0,0,442,440,1,0,0,
		0,442,441,1,0,0,0,443,445,1,0,0,0,444,446,5,35,0,0,445,444,1,0,0,0,445,
		446,1,0,0,0,446,97,1,0,0,0,447,449,3,118,59,0,448,447,1,0,0,0,449,452,
		1,0,0,0,450,448,1,0,0,0,450,451,1,0,0,0,451,453,1,0,0,0,452,450,1,0,0,
		0,453,458,3,96,48,0,454,457,3,90,45,0,455,457,3,94,47,0,456,454,1,0,0,
		0,456,455,1,0,0,0,457,460,1,0,0,0,458,456,1,0,0,0,458,459,1,0,0,0,459,
		99,1,0,0,0,460,458,1,0,0,0,461,463,3,40,20,0,462,461,1,0,0,0,463,466,1,
		0,0,0,464,462,1,0,0,0,464,465,1,0,0,0,465,470,1,0,0,0,466,464,1,0,0,0,
		467,469,3,118,59,0,468,467,1,0,0,0,469,472,1,0,0,0,470,468,1,0,0,0,470,
		471,1,0,0,0,471,476,1,0,0,0,472,470,1,0,0,0,473,475,3,40,20,0,474,473,
		1,0,0,0,475,478,1,0,0,0,476,474,1,0,0,0,476,477,1,0,0,0,477,482,1,0,0,
		0,478,476,1,0,0,0,479,481,3,38,19,0,480,479,1,0,0,0,481,484,1,0,0,0,482,
		480,1,0,0,0,482,483,1,0,0,0,483,488,1,0,0,0,484,482,1,0,0,0,485,487,3,
		40,20,0,486,485,1,0,0,0,487,490,1,0,0,0,488,486,1,0,0,0,488,489,1,0,0,
		0,489,101,1,0,0,0,490,488,1,0,0,0,491,492,3,6,3,0,492,493,5,56,0,0,493,
		103,1,0,0,0,494,495,5,62,0,0,495,105,1,0,0,0,496,501,3,116,58,0,497,498,
		5,35,0,0,498,500,3,116,58,0,499,497,1,0,0,0,500,503,1,0,0,0,501,499,1,
		0,0,0,501,502,1,0,0,0,502,107,1,0,0,0,503,501,1,0,0,0,504,507,3,38,19,
		0,505,507,3,104,52,0,506,504,1,0,0,0,506,505,1,0,0,0,507,508,1,0,0,0,508,
		509,5,20,0,0,509,510,3,116,58,0,510,518,1,0,0,0,511,514,3,38,19,0,512,
		514,3,104,52,0,513,511,1,0,0,0,513,512,1,0,0,0,514,515,1,0,0,0,515,516,
		3,114,57,0,516,518,1,0,0,0,517,506,1,0,0,0,517,513,1,0,0,0,518,109,1,0,
		0,0,519,524,3,108,54,0,520,521,5,35,0,0,521,523,3,108,54,0,522,520,1,0,
		0,0,523,526,1,0,0,0,524,522,1,0,0,0,524,525,1,0,0,0,525,111,1,0,0,0,526,
		524,1,0,0,0,527,529,3,106,53,0,528,530,5,35,0,0,529,528,1,0,0,0,529,530,
		1,0,0,0,530,542,1,0,0,0,531,533,3,110,55,0,532,534,5,35,0,0,533,532,1,
		0,0,0,533,534,1,0,0,0,534,542,1,0,0,0,535,536,3,106,53,0,536,537,5,35,
		0,0,537,539,3,110,55,0,538,540,5,35,0,0,539,538,1,0,0,0,539,540,1,0,0,
		0,540,542,1,0,0,0,541,527,1,0,0,0,541,531,1,0,0,0,541,535,1,0,0,0,542,
		113,1,0,0,0,543,545,5,26,0,0,544,546,3,112,56,0,545,544,1,0,0,0,545,546,
		1,0,0,0,546,547,1,0,0,0,547,559,5,27,0,0,548,550,5,23,0,0,549,551,3,112,
		56,0,550,549,1,0,0,0,550,551,1,0,0,0,551,552,1,0,0,0,552,559,5,24,0,0,
		553,555,5,29,0,0,554,556,3,112,56,0,555,554,1,0,0,0,555,556,1,0,0,0,556,
		557,1,0,0,0,557,559,5,30,0,0,558,543,1,0,0,0,558,548,1,0,0,0,558,553,1,
		0,0,0,559,115,1,0,0,0,560,563,3,98,49,0,561,563,3,114,57,0,562,560,1,0,
		0,0,562,561,1,0,0,0,563,117,1,0,0,0,564,565,5,21,0,0,565,566,5,23,0,0,
		566,567,3,38,19,0,567,568,5,24,0,0,568,583,1,0,0,0,569,570,5,21,0,0,570,
		571,5,23,0,0,571,572,3,38,19,0,572,573,5,20,0,0,573,574,3,116,58,0,574,
		575,5,24,0,0,575,583,1,0,0,0,576,577,5,21,0,0,577,578,5,23,0,0,578,579,
		3,38,19,0,579,580,3,114,57,0,580,581,5,24,0,0,581,583,1,0,0,0,582,564,
		1,0,0,0,582,569,1,0,0,0,582,576,1,0,0,0,583,119,1,0,0,0,584,586,3,68,34,
		0,585,584,1,0,0,0,585,586,1,0,0,0,586,590,1,0,0,0,587,589,3,118,59,0,588,
		587,1,0,0,0,589,592,1,0,0,0,590,588,1,0,0,0,590,591,1,0,0,0,591,593,1,
		0,0,0,592,590,1,0,0,0,593,594,3,28,14,0,594,595,3,4,2,0,595,597,3,88,44,
		0,596,598,3,132,66,0,597,596,1,0,0,0,597,598,1,0,0,0,598,599,1,0,0,0,599,
		600,5,11,0,0,600,601,3,98,49,0,601,121,1,0,0,0,602,603,3,20,10,0,603,604,
		3,2,1,0,604,605,3,140,70,0,605,123,1,0,0,0,606,607,5,9,0,0,607,608,5,26,
		0,0,608,609,3,66,33,0,609,610,5,27,0,0,610,611,3,2,1,0,611,612,3,64,32,
		0,612,125,1,0,0,0,613,616,3,22,11,0,614,617,3,124,62,0,615,617,3,122,61,
		0,616,614,1,0,0,0,616,615,1,0,0,0,617,127,1,0,0,0,618,619,3,26,13,0,619,
		623,3,2,1,0,620,621,3,8,4,0,621,622,3,38,19,0,622,624,1,0,0,0,623,620,
		1,0,0,0,623,624,1,0,0,0,624,129,1,0,0,0,625,626,5,61,0,0,626,131,1,0,0,
		0,627,643,5,31,0,0,628,629,5,32,0,0,629,634,3,130,65,0,630,631,5,35,0,
		0,631,633,3,130,65,0,632,630,1,0,0,0,633,636,1,0,0,0,634,632,1,0,0,0,634,
		635,1,0,0,0,635,638,1,0,0,0,636,634,1,0,0,0,637,639,5,35,0,0,638,637,1,
		0,0,0,638,639,1,0,0,0,639,640,1,0,0,0,640,641,5,33,0,0,641,643,1,0,0,0,
		642,627,1,0,0,0,642,628,1,0,0,0,643,133,1,0,0,0,644,646,3,68,34,0,645,
		644,1,0,0,0,646,649,1,0,0,0,647,645,1,0,0,0,647,648,1,0,0,0,648,650,1,
		0,0,0,649,647,1,0,0,0,650,651,3,18,9,0,651,653,3,38,19,0,652,654,3,132,
		66,0,653,652,1,0,0,0,653,654,1,0,0,0,654,655,1,0,0,0,655,656,5,20,0,0,
		656,657,3,98,49,0,657,135,1,0,0,0,658,665,5,62,0,0,659,665,5,61,0,0,660,
		661,5,23,0,0,661,662,3,98,49,0,662,663,5,24,0,0,663,665,1,0,0,0,664,658,
		1,0,0,0,664,659,1,0,0,0,664,660,1,0,0,0,665,137,1,0,0,0,666,668,3,68,34,
		0,667,666,1,0,0,0,668,671,1,0,0,0,669,667,1,0,0,0,669,670,1,0,0,0,670,
		675,1,0,0,0,671,669,1,0,0,0,672,674,3,118,59,0,673,672,1,0,0,0,674,677,
		1,0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,678,1,0,0,0,677,675,1,0,0,
		0,678,680,3,136,68,0,679,681,3,16,8,0,680,679,1,0,0,0,680,681,1,0,0,0,
		681,682,1,0,0,0,682,683,5,37,0,0,683,684,3,98,49,0,684,696,1,0,0,0,685,
		687,3,118,59,0,686,685,1,0,0,0,687,690,1,0,0,0,688,686,1,0,0,0,688,689,
		1,0,0,0,689,692,1,0,0,0,690,688,1,0,0,0,691,693,5,38,0,0,692,691,1,0,0,
		0,692,693,1,0,0,0,693,694,1,0,0,0,694,696,3,98,49,0,695,669,1,0,0,0,695,
		688,1,0,0,0,696,139,1,0,0,0,697,713,5,28,0,0,698,699,5,29,0,0,699,704,
		3,138,69,0,700,701,5,35,0,0,701,703,3,138,69,0,702,700,1,0,0,0,703,706,
		1,0,0,0,704,702,1,0,0,0,704,705,1,0,0,0,705,708,1,0,0,0,706,704,1,0,0,
		0,707,709,5,35,0,0,708,707,1,0,0,0,708,709,1,0,0,0,709,710,1,0,0,0,710,
		711,5,30,0,0,711,713,1,0,0,0,712,697,1,0,0,0,712,698,1,0,0,0,713,141,1,
		0,0,0,714,716,3,68,34,0,715,714,1,0,0,0,716,719,1,0,0,0,717,715,1,0,0,
		0,717,718,1,0,0,0,718,720,1,0,0,0,719,717,1,0,0,0,720,722,3,20,10,0,721,
		723,3,38,19,0,722,721,1,0,0,0,722,723,1,0,0,0,723,724,1,0,0,0,724,725,
		3,140,70,0,725,143,1,0,0,0,726,733,3,142,71,0,727,733,3,66,33,0,728,733,
		3,134,67,0,729,733,3,128,64,0,730,733,3,126,63,0,731,733,3,120,60,0,732,
		726,1,0,0,0,732,727,1,0,0,0,732,728,1,0,0,0,732,729,1,0,0,0,732,730,1,
		0,0,0,732,731,1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,0,734,735,1,0,0,0,
		735,145,1,0,0,0,736,734,1,0,0,0,89,192,196,198,204,212,214,221,226,228,
		234,241,246,248,256,258,271,274,278,284,289,295,309,313,317,320,327,333,
		336,351,355,359,367,380,388,392,402,406,419,423,427,442,445,450,456,458,
		464,470,476,482,488,501,506,513,517,524,529,533,539,541,545,550,555,558,
		562,582,585,590,597,616,623,634,638,642,647,653,664,669,675,680,688,692,
		695,704,708,712,717,722,732,734
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
